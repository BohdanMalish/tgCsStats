name: Docker Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # –ó—É–ø–∏–Ω–∏—Ç–∏ –∑–±—ñ—Ä–∫—É —è–∫—â–æ —î —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –∞–±–æ –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω—ñ —ñ–º–µ–Ω–∞
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –∫–æ–¥—É
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Test imports
      run: |
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–Ω–∞ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ñ –º–æ–¥—É–ª—ñ
        python -c "
        import sys
        sys.path.append('src')
        try:
            from models.user import UserDatabase, User
            from services.steam_api import SteamAPI
            from services.daily_reports import DailyReportsService
            print('‚úÖ –í—Å—ñ —ñ–º–ø–æ—Ä—Ç–∏ –ø—Ä–∞—Ü—é—é—Ç—å')
        except ImportError as e:
            print(f'‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}')
            sys.exit(1)
        "

  docker-build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: cs2-stats-bot:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        # –¢–µ—Å—Ç—É—î–º–æ —á–∏ –æ–±—Ä–∞–∑ –∑–±–∏—Ä–∞—î—Ç—å—Å—è —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è
        docker run --rm \
          -e TELEGRAM_BOT_TOKEN="test_token" \
          -e STEAM_API_KEY="test_key" \
          -e DATABASE_PATH="/app/data/test.db" \
          --entrypoint="" \
          cs2-stats-bot:test \
          python -c "
        import sys
        sys.path.append('/app')
        try:
            from src.models.user import UserDatabase
            from src.services.steam_api import SteamAPI
            print('‚úÖ Docker –æ–±—Ä–∞–∑ –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ')
        except Exception as e:
            print(f'‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ Docker –æ–±—Ä–∞–∑—ñ: {e}')
            sys.exit(1)
        "
    
    - name: Check Docker image size
      run: |
        docker images cs2-stats-bot:test
        IMAGE_SIZE=$(docker images cs2-stats-bot:test --format "{{.Size}}")
        echo "üìä –†–æ–∑–º—ñ—Ä –æ–±—Ä–∞–∑—É: $IMAGE_SIZE"

  security-scan:
    needs: docker-build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: cs2-stats-bot:test
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true
