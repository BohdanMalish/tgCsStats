"""
–ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª CS2 Stats Telegram Bot
"""
import asyncio
import logging
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from telegram import Bot

# –Ü–º–ø–æ—Ä—Ç–∏ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª—ñ–≤
from src.models.user import UserDatabase
from src.services.steam_api import SteamAPI
from src.services.daily_reports import DailyReportsService
from src.services.scheduler import TaskScheduler
from src.handlers.bot_handlers import BotHandlers

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
import os

# –•–∞—Ä–¥–∫–æ–¥–∏–º–æ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
TELEGRAM_BOT_TOKEN = "8343208198:AAE3dC1er-xa9risTj26IEA6b-A4vPGjxWQ"
STEAM_API_KEY = "6629403219DD2ADCA0D3F552F03F92A8"
DATABASE_PATH = os.getenv("DATABASE_PATH", "/app/data/bot_database.db")
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")
DAILY_REPORT_TIME = os.getenv("DAILY_REPORT_TIME", "10:00")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î–º–æ Railway –¥–æ–º–µ–Ω
def get_railway_domain():
    project_name = os.getenv("RAILWAY_PROJECT_NAME", "")
    environment_name = os.getenv("RAILWAY_ENVIRONMENT_NAME", "")
    if project_name and environment_name:
        return f"{project_name}-{environment_name}.up.railway.app"
    return "adorable-art-production.up.railway.app"  # Fallback

APP_DOMAIN = get_railway_domain()
PORT = int(os.getenv("PORT", "8080"))

print("üîß Using hardcoded API keys for testing")


def setup_logging():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è"""
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=getattr(logging, LOG_LEVEL, logging.INFO)
    )
    
    # –ó–º–µ–Ω—à—É—î–º–æ –ª–æ–≥–∏ –≤—ñ–¥ httpx —Ç–∞ telegram
    logging.getLogger('httpx').setLevel(logging.WARNING)
    logging.getLogger('telegram').setLevel(logging.WARNING)
    
    return logging.getLogger(__name__)


async def error_handler(update, context):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
    logger = logging.getLogger(__name__)
    logger.error(f"Update {update} caused error {context.error}")
    
    if update and update.message:
        await update.message.reply_text(
            "üòÖ –í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞! –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞."
        )


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    logger = setup_logging()
    
    # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
    logger.info(f"üîç –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è:")
    logger.info(f"   TELEGRAM_BOT_TOKEN: {'‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' if TELEGRAM_BOT_TOKEN and TELEGRAM_BOT_TOKEN != 'YOUR_BOT_TOKEN' else '‚ùå –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}")
    logger.info(f"   STEAM_API_KEY: {'‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –∫–æ–¥—ñ' if STEAM_API_KEY and STEAM_API_KEY != 'YOUR_STEAM_API_KEY' else '‚ùå –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}")
    logger.info(f"   APP_DOMAIN: {APP_DOMAIN}")
    logger.info(f"   PORT: {PORT}")
    logger.info(f"   DATABASE_PATH: {DATABASE_PATH}")
    logger.info(f"   LOG_LEVEL: {LOG_LEVEL}")
    logger.info(f"   DAILY_REPORT_TIME: {DAILY_REPORT_TIME}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    if not TELEGRAM_BOT_TOKEN or TELEGRAM_BOT_TOKEN == "YOUR_BOT_TOKEN":
        logger.error("‚ùå –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ TELEGRAM_BOT_TOKEN! –ü–µ—Ä–µ–≤—ñ—Ä –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –≤ Railway")
        return
    
    if not STEAM_API_KEY or STEAM_API_KEY == "YOUR_STEAM_API_KEY":
        logger.error("‚ùå –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ STEAM_API_KEY! –ü–µ—Ä–µ–≤—ñ—Ä –∫–æ–¥ –≤ main.py")
        return
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é CS2 Stats Bot...")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
    user_db = UserDatabase(DATABASE_PATH)
    steam_api = SteamAPI(STEAM_API_KEY)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Ä–≤—ñ—Å —â–æ–¥–µ–Ω–Ω–∏—Ö –∑–≤—ñ—Ç—ñ–≤
    daily_reports_service = DailyReportsService(user_db, steam_api, application.bot)
    bot_handlers = BotHandlers(user_db, steam_api, daily_reports_service, APP_DOMAIN, STEAM_API_KEY)
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
    scheduler = TaskScheduler(daily_reports_service)
    
    # –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot_handlers.start_command))
    application.add_handler(CommandHandler("help", bot_handlers.help_command))
    application.add_handler(CommandHandler("steam", bot_handlers.steam_command))
    application.add_handler(CommandHandler("stats", bot_handlers.stats_command))
    application.add_handler(CommandHandler("detailed_stats", bot_handlers.detailed_stats_command))
    application.add_handler(CommandHandler("add_friend", bot_handlers.add_friend_command))
    application.add_handler(CommandHandler("remove_friend", bot_handlers.remove_friend_command))
    application.add_handler(CommandHandler("friends_stats", bot_handlers.friends_stats_command))
    application.add_handler(CommandHandler("compare", bot_handlers.compare_command))
    application.add_handler(CommandHandler("daily_report", bot_handlers.daily_report_command))
    application.add_handler(CommandHandler("report_settings", bot_handlers.report_settings_command))
    application.add_handler(CommandHandler("about", bot_handlers.about_command))

    application.add_handler(CommandHandler("steam_login", bot_handlers.steam_login_command))
    application.add_handler(CommandHandler("steam_manual", bot_handlers.steam_manual_command))
    application.add_handler(CommandHandler("faceit_stats", bot_handlers.faceit_stats_command))
    application.add_handler(CommandHandler("faceit_matches", bot_handlers.faceit_matches_command))
    
    # –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
    application.add_error_handler(error_handler)
    
    logger.info("‚úÖ –ë–æ—Ç –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ! –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:")
    logger.info("   /start - –ø–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏")
    logger.info("   /help - –¥–æ–≤—ñ–¥–∫–∞")
    logger.info("   /steam - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ Steam ID")
    logger.info("   /stats - Steam —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    logger.info("   /detailed_stats - –¥–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    logger.info("   /detailed_stats - –¥–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    logger.info("   /add_friend - –¥–æ–¥–∞—Ç–∏ –¥—Ä—É–≥–∞")
    logger.info("   /remove_friend - –≤–∏–¥–∞–ª–∏—Ç–∏ –¥—Ä—É–≥–∞")
    logger.info("   /friends_stats - —Ä–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–∑—ñ–≤")
    logger.info("   /compare - –ø–æ—Ä—ñ–≤–Ω—è—Ç–∏ –∑ –≥—Ä–∞–≤—Ü–µ–º")
    logger.info("   /daily_report - —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç")
    logger.info("   /report_settings - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—ñ–≤")
    logger.info("   /about - –ø—Ä–æ –±–æ—Ç–∞")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
    try:
        scheduler.start(DAILY_REPORT_TIME)
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Steam OAuth
    web_server = None
    try:
        from src.web_server import WebServer
        web_server = WebServer(bot_handlers, STEAM_API_KEY, APP_DOMAIN, PORT)
        logger.info("üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Steam OAuth –≥–æ—Ç–æ–≤–∏–π")
        
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    try:
        logger.info("üéÆ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ! –ù–∞—Ç–∏—Å–Ω–∏ Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —è–∫—â–æ –≤—ñ–Ω —Å—Ç–≤–æ—Ä–µ–Ω–∏–π
        if web_server:
            # –î–ª—è Railway –∑–∞–ø—É—Å–∫–∞—î–º–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —è–∫ –æ—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å
            # –∞ –±–æ—Ç–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
            import threading
            def start_bot():
                try:
                    application.run_polling(allowed_updates=['message', 'callback_query'])
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –±–æ—Ç–∞: {e}")
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
            bot_thread = threading.Thread(target=start_bot, daemon=True)
            bot_thread.start()
            logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ")
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ
            import asyncio
            asyncio.run(web_server.start_server())
        else:
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –±–æ—Ç–∞
            application.run_polling(allowed_updates=['message', 'callback_query'])
            
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        scheduler.stop()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        scheduler.stop()


if __name__ == '__main__':
    main()
