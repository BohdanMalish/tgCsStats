"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è Telegram –±–æ—Ç–∞
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import re
from typing import Optional

from ..models.user import UserDatabase, User
from ..services.steam_api import SteamAPI
from ..services.daily_reports import DailyReportsService



class BotHandlers:
    def __init__(self, user_db: UserDatabase, steam_api: SteamAPI, daily_reports_service: DailyReportsService = None, app_domain: str = None, steam_api_key: str = None):
        self.user_db = user_db
        self.steam_api = steam_api
        self.daily_reports_service = daily_reports_service
        self.app_domain = app_domain or "tgcsstats-production.up.railway.app"
        self.steam_api_key = steam_api_key or "YOUR_STEAM_API_KEY"

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
        user_id = update.effective_user.id
        username = update.effective_user.username
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–±–æ –æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = self.user_db.get_user(user_id)
        if not user:
            user = User(telegram_id=user_id, username=username)
            self.user_db.create_user(user)
            
            welcome_text = """
üéÆ –í—ñ—Ç–∞—é –≤ CS2 Stats Bot!

–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ Counter-Strike 2 —Ç–∞ –∑–º–∞–≥–∞—Ç–∏—Å—è –∑ –¥—Ä—É–∑—è–º–∏!

üöÄ –î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏:
1. –î–æ–¥–∞–π —Å–≤—ñ–π Steam ID –∫–æ–º–∞–Ω–¥–æ—é /steam YOUR_STEAM_ID
2. –î–æ–¥–∞–π –¥—Ä—É–∑—ñ–≤ –∫–æ–º–∞–Ω–¥–æ—é /add_friend FRIEND_STEAM_ID
3. –ü–µ—Ä–µ–≥–ª—è–¥–∞–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥–æ—é /stats

üìä –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
/help - —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–æ–º–∞–Ω–¥
/steam - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Å–≤—ñ–π Steam ID
/stats - –º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/detailed_stats - –¥–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/add_friend - –¥–æ–¥–∞—Ç–∏ –¥—Ä—É–≥–∞
/friends_stats - —Ä–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–∑—ñ–≤
/leaderboard - —Ç–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤

üéØ –©–æ —è –≤–º—ñ—é:
‚Ä¢ –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É CS2
‚Ä¢ –†–∞—Ö—É–≤–∞—Ç–∏ Impact Score (–≤–ª–∞—Å–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥)
‚Ä¢ –ü–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ –∑ –¥—Ä—É–∑—è–º–∏
‚Ä¢ –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å

–ü–æ—á–Ω–µ–º–æ! üöÄ
"""
        else:
            welcome_text = f"""
üéÆ **–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, {username or '–ì—Ä–∞–≤–µ—Ü—å'}!**

–†–∞–¥–∏–π —Ç–µ–±–µ –±–∞—á–∏—Ç–∏ –∑–Ω–æ–≤—É! 

üìä –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /help —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –≤—Å—ñ –∫–æ–º–∞–Ω–¥–∏
üéØ –ê–±–æ /stats —â–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
"""

        await update.message.reply_text(welcome_text)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help"""
        help_text = """
üìã **–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ CS2 Stats Bot:**

üîß **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:**
/steam - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ Steam (—Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è)
/steam_login - –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è —á–µ—Ä–µ–∑ Steam OAuth
/steam_manual `<Steam_ID>` - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ Steam ID –≤—Ä—É—á–Ω—É (–æ–±–º–µ–∂–µ–Ω–æ)

üë• **–î—Ä—É–∑—ñ:**
/add_friend `<Steam_ID>` - –¥–æ–¥–∞—Ç–∏ –¥—Ä—É–≥–∞
/remove_friend `<Steam_ID>` - –≤–∏–¥–∞–ª–∏—Ç–∏ –¥—Ä—É–≥–∞
/friends - —Å–ø–∏—Å–æ–∫ –º–æ—ó—Ö –¥—Ä—É–∑—ñ–≤

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
/stats - Steam —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∑–∞ –≤–µ—Å—å —á–∞—Å)
/stats `week` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
/stats `month` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å
/stats `last_match` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –º–∞—Ç—á—É
/stats `last_20_matches` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 20 –º–∞—Ç—á—ñ–≤
/detailed_stats - –¥–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑ –Ω–æ–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
/compare `<Steam_ID>` - –ø–æ—Ä—ñ–≤–Ω—è—Ç–∏ –∑ –≥—Ä–∞–≤—Ü–µ–º

‚è∞ **–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ —á–∞—Å—É:**
/recent_activity `<–¥–Ω—ñ>` - –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ N –¥–Ω—ñ–≤
/time_stats - –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Ä—ñ–∑–Ω—ñ –ø–µ—Ä—ñ–æ–¥–∏
/last_matches `<–∫—ñ–ª—å–∫—ñ—Å—Ç—å>` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ N –º–∞—Ç—á—ñ–≤

üèÜ **FACEIT:**
/faceit_stats - FACEIT —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/faceit_matches - –æ—Å—Ç–∞–Ω–Ω—ñ 20 –º–∞—Ç—á—ñ–≤ FACEIT

üèÜ **–†–µ–π—Ç–∏–Ω–≥–∏:**
/friends_stats - —Ä–µ–π—Ç–∏–Ω–≥ –º–æ—ó—Ö –¥—Ä—É–∑—ñ–≤
/leaderboard - —Ç–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤ —Å–µ—Ä–µ–¥ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

üìÖ **–©–æ–¥–µ–Ω–Ω—ñ –∑–≤—ñ—Ç–∏:**
/daily_report - –æ—Ç—Ä–∏–º–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç –∑–∞—Ä–∞–∑
/report_settings - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—ñ–≤

üé¨ **–ê–Ω–∞–ª—ñ–∑ –¥–µ–º–æ:**
/demo_analysis `<MATCH_ID>` - –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –¥–µ–º–æ –º–∞—Ç—á—É
/demo_history - —ñ—Å—Ç–æ—Ä—ñ—è –∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –º–∞—Ç—á—ñ–≤
/demo_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å—ñ—Ö –∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –º–∞—Ç—á—ñ–≤

üîÑ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥:**
/enable_monitoring - —É–≤—ñ–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ç—á—ñ–≤
/disable_monitoring - –≤–∏–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
/monitoring_status - —Å—Ç–∞—Ç—É—Å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É

‚ÑπÔ∏è **–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:**
/about - –ø—Ä–æ –±–æ—Ç–∞ —Ç–∞ Impact Score
/help - —Ü—è –¥–æ–≤—ñ–¥–∫–∞

üí° **–ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:**
`/steam 76561198123456789`
`/steam nickname`
`/stats week` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
`/stats last_match` - –æ—Å—Ç–∞–Ω–Ω—ñ–π –º–∞—Ç—á
`/stats last_20_matches` - –æ—Å—Ç–∞–Ω–Ω—ñ 20 –º–∞—Ç—á—ñ–≤
`/last_matches 10` - –æ—Å—Ç–∞–Ω–Ω—ñ 10 –º–∞—Ç—á—ñ–≤
`/recent_activity 7` - –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–∞ 7 –¥–Ω—ñ–≤
`/add_friend 76561198987654321`
`/compare 76561198987654321`
`/demo_analysis 12345` - –∞–Ω–∞–ª—ñ–∑ –¥–µ–º–æ –º–∞—Ç—á—É
`/enable_monitoring` - —É–≤—ñ–º–∫–Ω—É—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥

üéØ **Impact Score** - —Ü–µ –Ω–∞—à –≤–ª–∞—Å–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –æ—Ü—ñ–Ω–∫–∏ –≥—Ä–∞–≤—Ü—è, —â–æ –≤—Ä–∞—Ö–æ–≤—É—î:
‚Ä¢ K/D Ratio (25%)
‚Ä¢ Win Rate (30%)
‚Ä¢ Headshot % (20%)
‚Ä¢ Assists per Match (15%)
‚Ä¢ MVP % (10%)

‚ö†Ô∏è **–ü—Ä–∏–º—ñ—Ç–∫–∞:** –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ —á–∞—Å—É (week/month) –ø–æ–∫–∞–∑—É—î –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –æ—Å–∫—ñ–ª—å–∫–∏ Steam API –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î —Ç–æ—á–Ω—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é –ø–æ —á–∞—Å—É.
"""
        
        await update.message.reply_text(help_text)

    async def steam_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /steam - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î –Ω–∞ Steam OAuth"""
        await update.message.reply_text(
            "üîê **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ Steam**\n\n"
            "–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è —á–µ—Ä–µ–∑ Steam.\n\n"
            "üìã **–ü–µ—Ä–µ–≤–∞–≥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:**\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –¥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
            "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–∞—Ç—á—ñ\n"
            "‚Ä¢ –ë—ñ–ª—å—à–µ –¥–∞–Ω–∏—Ö –Ω—ñ–∂ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n"
            "üîß **–ö–æ–º–∞–Ω–¥–∏:**\n"
            "/steam_login - –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è —á–µ—Ä–µ–∑ Steam\n"
            "/steam_manual - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ Steam ID –≤—Ä—É—á–Ω—É (–æ–±–º–µ–∂–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å)\n\n"
            "üí° **–†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ:** –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ /steam_login –¥–ª—è –ø–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ!"
        )

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /stats"""
        user_id = update.effective_user.id
        user = self.user_db.get_user(user_id)
        
        if not user or not user.steam_id:
            await update.message.reply_text(
                "‚ùå –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤–∏ —Å–≤—ñ–π Steam ID –∫–æ–º–∞–Ω–¥–æ—é `/steam`",
                parse_mode='Markdown'
            )
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ø–∞—Ä–∞–º–µ—Ç—Ä —á–∞—Å—É
        time_period = "all"
        if context.args:
            period_arg = context.args[0].lower()
            if period_arg in ["week", "month", "last_match", "last_20_matches"]:
                time_period = period_arg
        
        await update.message.reply_text(f"üìä –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ({time_period})...")
        
        try:
            raw_stats = await self.steam_api.get_player_stats(user.steam_id, time_period)
            if not raw_stats:
                await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!")
                return
            
            stats = self.steam_api.parse_cs2_stats(raw_stats)
            players = await self.steam_api.get_player_summaries([user.steam_id])
            player_name = players[0].get('personaname', '–ù–µ–≤—ñ–¥–æ–º–æ') if players else '–ù–µ–≤—ñ–¥–æ–º–æ'
            impact_score = self.steam_api.calculate_impact_score(stats)
            
            # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            period_text = {
                "all": "–∑–∞ –≤–µ—Å—å —á–∞—Å",
                "week": "–∑–∞ —Ç–∏–∂–¥–µ–Ω—å",
                "month": "–∑–∞ –º—ñ—Å—è—Ü—å",
                "last_match": "–æ—Å—Ç–∞–Ω–Ω—ñ–π –º–∞—Ç—á",
                "last_20_matches": "–æ—Å—Ç–∞–Ω–Ω—ñ 20 –º–∞—Ç—á—ñ–≤"
            }.get(time_period, "–∑–∞ –≤–µ—Å—å —á–∞—Å")
            
            stats_text = f"""
üéÆ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {player_name}** ({period_text})

üìä **–û—Å–Ω–æ–≤–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:**
‚Ä¢ K/D Ratio: **{stats['kd_ratio']}** ({stats['kills']} / {stats['deaths']})
‚Ä¢ Win Rate: **{stats['win_rate']}%** ({stats['wins']}/{stats['matches_played']})
‚Ä¢ Headshot %: **{stats['headshot_percent']}%**
‚Ä¢ –¢–æ—á–Ω—ñ—Å—Ç—å: **{stats['accuracy_percent']}%**

üèÜ **–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è:**
‚Ä¢ MVP: **{stats['mvps']}** ({stats['mvp_percent']}%)
‚Ä¢ –£—Ä–æ–Ω –∑–∞ –º–∞—Ç—á: **{stats['damage_per_match']:,}**
‚Ä¢ –ê—Å–∏—Å—Ç–∏ –∑–∞ –º–∞—Ç—á: **{stats['assists_per_match']}**

‚ö° **Impact Score: {impact_score}/100**
"""
            
            # –î–æ–¥–∞—î–º–æ –ø—Ä–∏–º—ñ—Ç–∫—É –ø—Ä–æ —Ñ—ñ–ª—å—Ç—Ä —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if time_period in ["week", "month"] and raw_stats.get('filter_note'):
                stats_text += f"\n‚ö†Ô∏è *{raw_stats['filter_note']}*"
            
            # –î–æ–¥–∞—î–º–æ –ø—Ä–∏–º—ñ—Ç–∫—É –ø—Ä–æ –æ—Å—Ç–∞–Ω–Ω—ñ 20 –º–∞—Ç—á—ñ–≤
            if time_period == "last_20_matches" and raw_stats.get('note'):
                stats_text += f"\nüìù *{raw_stats['note']}*"
                stats_text += f"\nüìä –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ {raw_stats.get('total_matches', 0)} –∑–∞–≥–∞–ª—å–Ω–∏—Ö –º–∞—Ç—á—ñ–≤"
            
            await update.message.reply_text(stats_text, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

    async def detailed_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /detailed_stats"""
        user_id = update.effective_user.id
        user = self.user_db.get_user(user_id)
        
        if not user or not user.steam_id:
            await update.message.reply_text(
                "‚ùå –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤–∏ —Å–≤—ñ–π Steam ID –∫–æ–º–∞–Ω–¥–æ—é `/steam`",
                parse_mode='Markdown'
            )
            return
        
        await update.message.reply_text("üìä –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        try:
            raw_stats = await self.steam_api.get_player_stats(user.steam_id)
            if not raw_stats:
                await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!")
                return
            
            stats = self.steam_api.parse_cs2_stats(raw_stats)
            players = await self.steam_api.get_player_summaries([user.steam_id])
            player_name = players[0].get('personaname', '–ù–µ–≤—ñ–¥–æ–º–æ') if players else '–ù–µ–≤—ñ–¥–æ–º–æ'
            impact_score = self.steam_api.calculate_impact_score(stats)
            
            # –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            detailed_text = f"""
üéÆ **–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {player_name}**

üìä **–û—Å–Ω–æ–≤–Ω–µ:**
‚Ä¢ K/D Ratio: **{stats['kd_ratio']}** ({stats['kills']} / {stats['deaths']})
‚Ä¢ Win Rate: **{stats['win_rate']}%** ({stats['wins']}/{stats['matches_played']})
‚Ä¢ –ê—Å–∏—Å—Ç–∏: **{stats['assists']}** ({stats['assists_per_match']}/–º–∞—Ç—á)

üéØ **–¢–æ—á–Ω—ñ—Å—Ç—å —ñ —Å—Ç—Ä—ñ–ª—å–±–∞:**
‚Ä¢ Headshot %: **{stats['headshot_percent']}%** ({stats['headshot_kills']}/{stats['kills']})
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å: **{stats['accuracy_percent']}%**
‚Ä¢ –ü–æ—Å—Ç—Ä—ñ–ª—ñ–≤: **{stats['shots_fired']:,}** | –í–ª—É—á–µ–Ω—å: **{stats['shots_hit']:,}**

üèÜ **–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è:**
‚Ä¢ MVP —Ä–∞—É–Ω–¥—ñ–≤: **{stats['mvps']}** ({stats['mvp_percent']}%)
‚Ä¢ –£—Ä–æ–Ω –∑–∞ –º–∞—Ç—á: **{stats['damage_per_match']:,}**
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∏–π —É—Ä–æ–Ω: **{stats['damage_dealt']:,}**

‚öîÔ∏è **–î–æ–¥–∞—Ç–∫–æ–≤–æ:**
‚Ä¢ –†–∞—É–Ω–¥—ñ–≤ –∑—ñ–≥—Ä–∞–Ω–æ: **{stats['rounds_played']:,}**
‚Ä¢ –ù–æ–∂–æ–≤–∏—Ö –≤–±–∏–≤—Å—Ç–≤: **{stats['knife_kills']}**
‚Ä¢ –ë–æ–º–± –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: **{stats['planted_bombs']}**
‚Ä¢ –ë–æ–º–± —Ä–æ–∑–º—ñ–Ω–æ–≤–∞–Ω–æ: **{stats['defused_bombs']}**

üî• **–ù–æ–≤–∞ –¥–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:**
‚Ä¢ –î–æ–º—ñ–Ω–∞—Ü—ñ—ó: **{stats['dominations']}** | –ü–æ–º—Å—Ç–∏: **{stats['revenges']}**
‚Ä¢ –í–±–∏–≤—Å—Ç–≤ –∑–±—Ä–æ—î—é –≤–æ—Ä–æ–≥–∞: **{stats['enemy_weapon_kills']}**
‚Ä¢ –í–±–∏–≤—Å—Ç–≤ –æ—Å–ª—ñ–ø–ª–µ–Ω–∏—Ö: **{stats['blinded_kills']}**
‚Ä¢ –ù–æ–∂–æ–≤–∏—Ö –¥—É–µ–ª–µ–π: **{stats['knife_fight_kills']}**
‚Ä¢ –í–±–∏–≤—Å—Ç–≤ –∑—É–º-—Å–Ω–∞–π–ø–µ—Ä—ñ–≤: **{stats['zoomed_sniper_kills']}**
‚Ä¢ –ó–±—Ä–æ—ó –ø–æ–¥–∞—Ä–æ–≤–∞–Ω–æ: **{stats['weapons_donated']}**
‚Ä¢ Contribution Score: **{stats['contribution_score']:,}**

‚ö° **Impact Score: {impact_score}/100**
"""
            
            # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–±—Ä–æ—ó —è–∫—â–æ —î
            if stats['weapon_stats']:
                detailed_text += "\nüî´ **–¢–æ–ø –∑–±—Ä–æ—è:**\n"
                for i, weapon in enumerate(stats['weapon_stats'], 1):
                    detailed_text += f"{i}. **{weapon['name']}**: {weapon['kills']} –≤–±–∏–≤—Å—Ç–≤"
                    if weapon['accuracy'] > 0:
                        detailed_text += f" ({weapon['accuracy']}% —Ç–æ—á–Ω—ñ—Å—Ç—å)"
                    detailed_text += "\n"
            
            # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ä—Ç–∞—Ö
            if stats.get('map_stats'):
                detailed_text += "\nüó∫Ô∏è **–¢–æ–ø –∫–∞—Ä—Ç–∏:**\n"
                for i, map_stat in enumerate(stats['map_stats'][:3], 1):
                    detailed_text += f"{i}. **{map_stat['name']}**: {map_stat['wins']}W/{map_stat['rounds']}R ({map_stat['win_rate']}%)\n"
            
            # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–∂–∏–º–∞—Ö –≥—Ä–∏
            if stats.get('game_mode_stats'):
                detailed_text += "\nüéÆ **–†–µ–∂–∏–º–∏ –≥—Ä–∏:**\n"
                for mode_name, mode_data in stats['game_mode_stats'].items():
                    if mode_name == 'gun_game':
                        detailed_text += f"‚Ä¢ **Gun Game**: {mode_data['rounds_won']}W/{mode_data['rounds_played']}R ({mode_data['round_win_rate']}%)\n"
                    elif mode_name == 'progressive':
                        detailed_text += f"‚Ä¢ **Progressive**: {mode_data['matches_won']} –ø–µ—Ä–µ–º–æ–≥\n"
                    elif mode_name == 'tr_bomb':
                        detailed_text += f"‚Ä¢ **TR Bomb**: {mode_data['matches_won']} –ø–µ—Ä–µ–º–æ–≥\n"
            
            # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º–∞—Ç—á
            if stats.get('last_match') and stats['last_match'].get('kills', 0) > 0:
                last_match = stats['last_match']
                detailed_text += f"\nüéØ **–û—Å—Ç–∞–Ω–Ω—ñ–π –º–∞—Ç—á:**\n"
                detailed_text += f"‚Ä¢ K/D: **{last_match['kills']}/{last_match['deaths']}**\n"
                detailed_text += f"‚Ä¢ MVP: **{last_match['mvps']}**\n"
                detailed_text += f"‚Ä¢ –£—Ä–æ–Ω: **{last_match['damage']:,}**\n"
                detailed_text += f"‚Ä¢ Contribution: **{last_match['contribution_score']}**\n"
                
                if last_match.get('favorite_weapon'):
                    weapon = last_match['favorite_weapon']
                    detailed_text += f"‚Ä¢ –£–ª—é–±–ª–µ–Ω–∞ –∑–±—Ä–æ—è: **{weapon['kills']}** –≤–±–∏–≤—Å—Ç–≤ ({weapon['accuracy']}% —Ç–æ—á–Ω—ñ—Å—Ç—å)\n"
            
            await update.message.reply_text(detailed_text, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

    async def add_friend_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /add_friend"""
        user_id = update.effective_user.id
        user = self.user_db.get_user(user_id)
        
        if not user:
            await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ—é `/start`", parse_mode='Markdown')
            return
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –í–∫–∞–∂–∏ Steam ID –¥—Ä—É–≥–∞!\n\n"
                "üìù **–ü—Ä–∏–∫–ª–∞–¥:**\n"
                "`/add_friend 76561198123456789`",
                parse_mode='Markdown'
            )
            return
        
        friend_input = context.args[0]
        friend_steam_id = None
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ Steam ID –∞–±–æ vanity URL
        if friend_input.isdigit() and len(friend_input) == 17:
            friend_steam_id = friend_input
        else:
            friend_steam_id = await self.steam_api.get_steam_id_from_vanity_url(friend_input)
        
        if not friend_steam_id:
            await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥—Ä—É–≥–∞ –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º ID/–Ω—ñ–∫–æ–º!")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –¥–æ–¥–∞—î —Å–µ–±–µ
        if friend_steam_id == user.steam_id:
            await update.message.reply_text("üòÖ –¢–∏ –Ω–µ –º–æ–∂–µ—à –¥–æ–¥–∞—Ç–∏ —Å–µ–±–µ –≤ –¥—Ä—É–∑—ñ!")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —î –≤ –¥—Ä—É–∑—è—Ö
        if friend_steam_id in user.friends:
            await update.message.reply_text("üë• –¶–µ–π –≥—Ä–∞–≤–µ—Ü—å –≤–∂–µ –≤ —Ç–≤–æ—ó—Ö –¥—Ä—É–∑—è—Ö!")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥—Ä—É–≥–∞
        players = await self.steam_api.get_player_summaries([friend_steam_id])
        if not players:
            await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≥—Ä–∞–≤—Ü—è!")
            return
        
        friend_name = players[0].get('personaname', '–ù–µ–≤—ñ–¥–æ–º–æ')
        
        # –î–æ–¥–∞—î–º–æ –¥—Ä—É–≥–∞
        success = self.user_db.add_friend(user_id, friend_steam_id)
        if success:
            await update.message.reply_text(
                f"‚úÖ **–î—Ä—É–≥ –¥–æ–¥–∞–Ω–∏–π!**\n\n"
                f"üë§ **{friend_name}**\n"
                f"üÜî `{friend_steam_id}`\n\n"
                f"üéØ –¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à:\n"
                f"‚Ä¢ –ü–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É `/compare {friend_steam_id}`\n"
                f"‚Ä¢ –î–∏–≤–∏—Ç–∏—Å—è —Ä–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–∑—ñ–≤ `/friends_stats`",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥—Ä—É–≥–∞!")

    async def friends_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /friends_stats"""
        user_id = update.effective_user.id
        user = self.user_db.get_user(user_id)
        
        if not user or not user.steam_id:
            await update.message.reply_text(
                "‚ùå –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤–∏ —Å–≤—ñ–π Steam ID –∫–æ–º–∞–Ω–¥–æ—é `/steam`",
                parse_mode='Markdown'
            )
            return
        
        if not user.friends:
            await update.message.reply_text(
                "üë• –£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î –¥—Ä—É–∑—ñ–≤!\n\n"
                "–î–æ–¥–∞–π –¥—Ä—É–∑—ñ–≤ –∫–æ–º–∞–Ω–¥–æ—é:\n"
                "`/add_friend STEAM_ID`",
                parse_mode='Markdown'
            )
            return
        
        await update.message.reply_text("üìä –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥—Ä—É–∑—ñ–≤...")
        
        try:
            # –í–∫–ª—é—á–∞—î–º–æ —Å–µ–±–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥
            all_steam_ids = [user.steam_id] + user.friends
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Å—ñ—Ö
            friends_stats = []
            for steam_id in all_steam_ids:
                raw_stats = await self.steam_api.get_player_stats(steam_id)
                if raw_stats:
                    stats = self.steam_api.parse_cs2_stats(raw_stats)
                    impact_score = self.steam_api.calculate_impact_score(stats)
                    
                    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –≥—Ä–∞–≤—Ü—è
                    players = await self.steam_api.get_player_summaries([steam_id])
                    name = players[0].get('personaname', '–ù–µ–≤—ñ–¥–æ–º–æ') if players else '–ù–µ–≤—ñ–¥–æ–º–æ'
                    
                    friends_stats.append({
                        'steam_id': steam_id,
                        'name': name,
                        'stats': stats,
                        'impact_score': impact_score,
                        'is_me': steam_id == user.steam_id
                    })
            
            if not friends_stats:
                await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥—Ä—É–∑—ñ–≤!")
                return
            
            # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ Impact Score
            friends_stats.sort(key=lambda x: x['impact_score'], reverse=True)
            
            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            leaderboard_text = "üèÜ **–†–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–∑—ñ–≤ (Impact Score):**\n\n"
            
            for i, friend in enumerate(friends_stats, 1):
                emoji = "üëë" if i == 1 else f"{i}Ô∏è‚É£"
                me_indicator = " üë§" if friend['is_me'] else ""
                
                leaderboard_text += f"{emoji} **{friend['name']}**{me_indicator}\n"
                leaderboard_text += f"   ‚ö° Impact Score: **{friend['impact_score']}/100**\n"
                leaderboard_text += f"   üìä K/D: {friend['stats']['kd_ratio']} | Win: {friend['stats']['win_rate']}%\n\n"
            
            leaderboard_text += "üí° –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π `/compare STEAM_ID` –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è!"
            
            await update.message.reply_text(leaderboard_text, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

    async def compare_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /compare"""
        user_id = update.effective_user.id
        user = self.user_db.get_user(user_id)
        
        if not user or not user.steam_id:
            await update.message.reply_text(
                "‚ùå –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤–∏ —Å–≤—ñ–π Steam ID –∫–æ–º–∞–Ω–¥–æ—é `/steam`",
                parse_mode='Markdown'
            )
            return
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –í–∫–∞–∂–∏ Steam ID –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è!\n\n"
                "üìù **–ü—Ä–∏–∫–ª–∞–¥:**\n"
                "`/compare 76561198123456789`",
                parse_mode='Markdown'
            )
            return
        
        target_input = context.args[0]
        target_steam_id = None
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ Steam ID –∞–±–æ vanity URL
        if target_input.isdigit() and len(target_input) == 17:
            target_steam_id = target_input
        else:
            target_steam_id = await self.steam_api.get_steam_id_from_vanity_url(target_input)
        
        if not target_steam_id:
            await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≥—Ä–∞–≤—Ü—è!")
            return
        
        await update.message.reply_text("üìä –ü–æ—Ä—ñ–≤–Ω—é—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±–æ—Ö –≥—Ä–∞–≤—Ü—ñ–≤
            my_raw_stats = await self.steam_api.get_player_stats(user.steam_id)
            target_raw_stats = await self.steam_api.get_player_stats(target_steam_id)
            
            if not my_raw_stats or not target_raw_stats:
                await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–¥–Ω–æ–≥–æ –∑ –≥—Ä–∞–≤—Ü—ñ–≤!")
                return
            
            my_stats = self.steam_api.parse_cs2_stats(my_raw_stats)
            target_stats = self.steam_api.parse_cs2_stats(target_raw_stats)
            
            my_impact = self.steam_api.calculate_impact_score(my_stats)
            target_impact = self.steam_api.calculate_impact_score(target_stats)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º–µ–Ω–∞
            players = await self.steam_api.get_player_summaries([user.steam_id, target_steam_id])
            my_name = "–¢–∏"
            target_name = "–°—É–ø–µ—Ä–Ω–∏–∫"
            
            for player in players:
                if player['steamid'] == user.steam_id:
                    my_name = player.get('personaname', '–¢–∏')
                elif player['steamid'] == target_steam_id:
                    target_name = player.get('personaname', '–°—É–ø–µ—Ä–Ω–∏–∫')
            
            # –§–æ—Ä–º—É—î–º–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
            def compare_stat(my_val, target_val, higher_better=True):
                if my_val == target_val:
                    return "üü°"
                elif (my_val > target_val) == higher_better:
                    return "üü¢"
                else:
                    return "üî¥"
            
            compare_text = f"""
‚öîÔ∏è **–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**

üë§ **{my_name}** vs **{target_name}**

üìä **Impact Score:**
{compare_stat(my_impact, target_impact)} {my_name}: **{my_impact}/100**
{compare_stat(target_impact, my_impact)} {target_name}: **{target_impact}/100**

üéØ **–û—Å–Ω–æ–≤–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:**
{compare_stat(my_stats['kd_ratio'], target_stats['kd_ratio'])} K/D: **{my_stats['kd_ratio']}** vs **{target_stats['kd_ratio']}**
{compare_stat(my_stats['win_rate'], target_stats['win_rate'])} Win Rate: **{my_stats['win_rate']}%** vs **{target_stats['win_rate']}%**
{compare_stat(my_stats['headshot_percent'], target_stats['headshot_percent'])} Headshot %: **{my_stats['headshot_percent']}%** vs **{target_stats['headshot_percent']}%**

üèÜ **–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è:**
{compare_stat(my_stats['mvp_percent'], target_stats['mvp_percent'])} MVP %: **{my_stats['mvp_percent']}%** vs **{target_stats['mvp_percent']}%**
{compare_stat(my_stats['assists_per_match'], target_stats['assists_per_match'])} Assists/Match: **{my_stats['assists_per_match']}** vs **{target_stats['assists_per_match']}**

üìà **–î–æ—Å–≤—ñ–¥:**
üéÆ –ú–∞—Ç—á—ñ–≤: **{my_stats['matches_played']}** vs **{target_stats['matches_played']}**
‚è±Ô∏è –†–∞—É–Ω–¥—ñ–≤: **{my_stats['rounds_played']:,}** vs **{target_stats['rounds_played']:,}**

üü¢ - –∫—Ä–∞—â–µ | üî¥ - –≥—ñ—Ä—à–µ | üü° - –æ–¥–Ω–∞–∫–æ–≤–æ
"""
            
            await update.message.reply_text(compare_text, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

    async def remove_friend_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /remove_friend"""
        user_id = update.effective_user.id
        user = self.user_db.get_user(user_id)
        
        if not user:
            await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ—é `/start`", parse_mode='Markdown')
            return
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –í–∫–∞–∂–∏ Steam ID –¥—Ä—É–≥–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è!\n\n"
                "üìù **–ü—Ä–∏–∫–ª–∞–¥:**\n"
                "`/remove_friend 76561198123456789`",
                parse_mode='Markdown'
            )
            return
        
        friend_input = context.args[0]
        friend_steam_id = None
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ Steam ID –∞–±–æ vanity URL
        if friend_input.isdigit() and len(friend_input) == 17:
            friend_steam_id = friend_input
        else:
            friend_steam_id = await self.steam_api.get_steam_id_from_vanity_url(friend_input)
        
        if not friend_steam_id or friend_steam_id not in user.friends:
            await update.message.reply_text("‚ùå –¶—å–æ–≥–æ –≥—Ä–∞–≤—Ü—è –Ω–µ–º–∞—î –≤ —Ç–≤–æ—ó—Ö –¥—Ä—É–∑—è—Ö!")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –¥—Ä—É–≥–∞ –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º
        players = await self.steam_api.get_player_summaries([friend_steam_id])
        friend_name = players[0].get('personaname', '–ù–µ–≤—ñ–¥–æ–º–æ') if players else '–ù–µ–≤—ñ–¥–æ–º–æ'
        
        # –í–∏–¥–∞–ª—è—î–º–æ –¥—Ä—É–≥–∞
        success = self.user_db.remove_friend(user_id, friend_steam_id)
        if success:
            await update.message.reply_text(
                f"‚úÖ **–î—Ä—É–≥ –≤–∏–¥–∞–ª–µ–Ω–∏–π!**\n\n"
                f"üë§ **{friend_name}** –±—ñ–ª—å—à–µ –Ω–µ –≤ —Ç–≤–æ—ó—Ö –¥—Ä—É–∑—è—Ö\n"
                f"üÜî `{friend_steam_id}`",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥—Ä—É–≥–∞!")

    async def daily_report_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /daily_report"""
        user_id = update.effective_user.id
        user = self.user_db.get_user(user_id)
        
        if not user or not user.steam_id:
            await update.message.reply_text(
                "‚ùå –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤–∏ —Å–≤—ñ–π Steam ID –∫–æ–º–∞–Ω–¥–æ—é `/steam`",
                parse_mode='Markdown'
            )
            return
        
        if not self.daily_reports_service:
            await update.message.reply_text("‚ùå –°–µ—Ä–≤—ñ—Å —â–æ–¥–µ–Ω–Ω–∏—Ö –∑–≤—ñ—Ç—ñ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π!")
            return
        
        await update.message.reply_text("üìä –ì–µ–Ω–µ—Ä—É—é —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç...")
        
        try:
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
            personal_report = await self.daily_reports_service.generate_personal_daily_report(user)
            if personal_report:
                await update.message.reply_text(personal_report, parse_mode='Markdown')
            else:
                await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç!")
                return
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–≤—ñ—Ç –ø–æ –¥—Ä—É–∑—è—Ö —è–∫—â–æ —î
            if user.friends:
                friends_report = await self.daily_reports_service.generate_friends_daily_report(user)
                if friends_report:
                    await update.message.reply_text(friends_report, parse_mode='Markdown')
            else:
                await update.message.reply_text(
                    "üë• –£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î –¥—Ä—É–∑—ñ–≤ –¥–ª—è –∑–≤—ñ—Ç—É!\n"
                    "–î–æ–¥–∞–π –¥—Ä—É–∑—ñ–≤ –∫–æ–º–∞–Ω–¥–æ—é `/add_friend` —â–æ–± –±–∞—á–∏—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–∏.",
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É: {str(e)}")

    async def report_settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /report_settings"""
        user_id = update.effective_user.id
        user = self.user_db.get_user(user_id)
        
        if not user:
            await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ—é `/start`", parse_mode='Markdown')
            return
        
        # TODO: –í –º–∞–π–±—É—Ç–Ω—å–æ–º—É –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É –∑–≤—ñ—Ç—ñ–≤, –≤–∏–º–∫–Ω–µ–Ω–Ω—è/—É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è —Ç–æ—â–æ
        settings_text = """
üìÖ **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–∏—Ö –∑–≤—ñ—Ç—ñ–≤**

üïô **–ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:** 10:00 —â–æ—Ä–∞–Ω–∫—É
üìä **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç:** ‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ
üèÜ **–ó–≤—ñ—Ç –ø–æ –¥—Ä—É–∑—è—Ö:** ‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ (—è–∫—â–æ —î –¥—Ä—É–∑—ñ)

üìã **–©–æ –≤–∫–ª—é—á–∞—î –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç:**
‚Ä¢ –ü–æ—Ç–æ—á–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (K/D, Win Rate, HS%)
‚Ä¢ Impact Score
‚Ä¢ –ü–æ—Ä–∞–¥–∞ –¥–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–≤–æ—î—ó –≥—Ä–∏

üìã **–©–æ –≤–∫–ª—é—á–∞—î –∑–≤—ñ—Ç –ø–æ –¥—Ä—É–∑—è—Ö:**
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥ –≤—Å—ñ—Ö –¥—Ä—É–∑—ñ–≤ –∑–∞ Impact Score
‚Ä¢ –¢–≤–æ—è –ø–æ–∑–∏—Ü—ñ—è –≤ –≥—Ä—É–ø—ñ
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–∏
‚Ä¢ –õ—ñ–¥–µ—Ä –¥–Ω—è

üí° **–ö–æ—Ä–∏—Å–Ω–æ –∑–Ω–∞—Ç–∏:**
‚Ä¢ –ó–≤—ñ—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —â–æ—Ä–∞–Ω–∫—É
‚Ä¢ –ú–æ–∂–µ—à –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤—ñ—Ç –∑–∞—Ä–∞–∑ –∫–æ–º–∞–Ω–¥–æ—é `/daily_report`
‚Ä¢ –î–æ–¥–∞–≤–∞–π –¥—Ä—É–∑—ñ–≤ —â–æ–± –∑–º–∞–≥–∞—Ç–∏—Å—è –≤ –≥—Ä—É–ø—ñ!

üîÆ **–°–∫–æ—Ä–æ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–æ:**
‚Ä¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
‚Ä¢ –í–∏–º–∫–Ω–µ–Ω–Ω—è –æ–∫—Ä–µ–º–∏—Ö —Ç–∏–ø—ñ–≤ –∑–≤—ñ—Ç—ñ–≤
‚Ä¢ –¢–∏–∂–Ω–µ–≤—ñ –ø—ñ–¥—Å—É–º–∫–∏
‚Ä¢ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –¥—Ä—É–∑—ñ–≤
"""
        
        await update.message.reply_text(settings_text, parse_mode='Markdown')

    async def about_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /about"""
        about_text = """
ü§ñ *CS2 Stats Bot v1.0*

–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–∞–≥–∞—î –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Counter-Strike 2 —Ç–∞ –∑–º–∞–≥–∞—Ç–∏—Å—è –∑ –¥—Ä—É–∑—è–º–∏!

üß† *Impact Score Algorithm:*
–ù–∞—à –≤–ª–∞—Å–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –æ—Ü—ñ–Ω–∫–∏ –≥—Ä–∞–≤—Ü—è:
‚Ä¢ *K/D Ratio* (25%) - –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —É –≤–±–∏–≤—Å—Ç–≤–∞—Ö
‚Ä¢ *Win Rate* (30%) - –≤—ñ–¥—Å–æ—Ç–æ–∫ –ø–µ—Ä–µ–º–æ–≥  
‚Ä¢ *Headshot %* (20%) - —Ç–æ—á–Ω—ñ—Å—Ç—å —Å—Ç—Ä—ñ–ª—å–±–∏
‚Ä¢ *Assists/Match* (15%) - –∫–æ–º–∞–Ω–¥–Ω–∞ –≥—Ä–∞
‚Ä¢ *MVP %* (10%) - –ª—ñ–¥–µ—Ä—Å—å–∫—ñ —è–∫–æ—Å—Ç—ñ

üîß *–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó:*
‚Ä¢ Python + python-telegram-bot
‚Ä¢ Steam Web API
‚Ä¢ SQLite –±–∞–∑–∞ –¥–∞–Ω–∏—Ö
‚Ä¢ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –æ–±—Ä–æ–±–∫–∞

üë®‚Äçüíª *–†–æ–∑—Ä–æ–±–Ω–∏–∫:* @Bodyamalish
üìä *–í–µ—Ä—Å—ñ—è:* 1.0 MVP
üîÑ *–û–Ω–æ–≤–ª–µ–Ω–Ω—è:* –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ

üí° *–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Ç–∞ –±–∞–≥–∏:* @Bodyamalish
‚≠ê *GitHub:* github.com/BohdanMalish/tgCsStats
"""
        
        await update.message.reply_text(about_text, parse_mode='Markdown')



    async def steam_login_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /steam_login - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ Steam"""
        user_id = update.effective_user.id
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ URL –¥–ª—è Steam OAuth
        try:
            from ..services.steam_oauth import SteamOAuth
            
            steam_oauth = SteamOAuth(
                api_key=self.steam_api_key,  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ API –∫–ª—é—á –∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
                app_domain=self.app_domain  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–æ–º–µ–Ω –∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
            )
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ return URL
            return_url = f"https://{self.app_domain}/steam/callback?user_id={user_id}"
            login_url = steam_oauth.generate_login_url(return_url)
            
            login_text = f"""
üîê **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ Steam**

–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è —á–µ—Ä–µ–∑ Steam.

üìã **–ö—Ä–æ–∫–∏:**
1. –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É "–£–≤—ñ–π—Ç–∏ —á–µ—Ä–µ–∑ Steam" –Ω–∏–∂—á–µ
2. –£–≤—ñ–π–¥–∏ –≤ —Å–≤—ñ–π Steam –∞–∫–∞—É–Ω—Ç
3. –î–æ–∑–≤–æ–ª—å –¥–æ—Å—Ç—É–ø –¥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
4. –ü–æ–≤–µ—Ä–Ω–∏—Å—è –≤ –±–æ—Ç–∞

‚úÖ **–©–æ —Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à:**
‚Ä¢ –î–æ—Å—Ç—É–ø –¥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–∞—Ç—á—ñ
‚Ä¢ –ë—ñ–ª—å—à–µ –¥–∞–Ω–∏—Ö –Ω—ñ–∂ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

üîó **–ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:**
{login_url}

‚ö†Ô∏è **–í–∞–∂–ª–∏–≤–æ:** –¶–µ –±–µ–∑–ø–µ—á–Ω–æ, –º–∏ –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–≤—ñ–π –ø–∞—Ä–æ–ª—å!
"""
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ inline –∫–Ω–æ–ø–∫—É
            keyboard = [[InlineKeyboardButton("üîê –£–≤—ñ–π—Ç–∏ —á–µ—Ä–µ–∑ Steam", url=login_url)]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(login_text, parse_mode='Markdown', reply_markup=reply_markup)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Steam OAuth: {str(e)}")

    async def steam_manual_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /steam_manual –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Steam ID"""
        user_id = update.effective_user.id
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ Steam ID –∞–±–æ –Ω—ñ–∫–Ω–µ–π–º!\n\n"
                "üìù *–ü—Ä–∏–∫–ª–∞–¥–∏:*\n"
                "`/steam_manual 76561198123456789`\n"
                "`/steam_manual nickname`\n\n"
                "üîç *–Ø–∫ –∑–Ω–∞–π—Ç–∏ —Å–≤—ñ–π Steam ID:*\n"
                "1. –í—ñ–¥–∫—Ä–∏–π —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å Steam\n"
                "2. –°–∫–æ–ø—ñ—é–π —á–∏—Å–ª–∞ –∑ URL –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –Ω—ñ–∫–Ω–µ–π–º\n\n"
                "‚ö†Ô∏è *–û–±–º–µ–∂–µ–Ω–Ω—è:* –ë–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –ø—É–±–ª—ñ—á–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞!",
                parse_mode='Markdown'
            )
            return

        steam_input = context.args[0]
        steam_id = None
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –≤–∂–µ Steam ID (17 —Ü–∏—Ñ—Ä)
        if steam_input.isdigit() and len(steam_input) == 17:
            steam_id = steam_input
        else:
            # –ü—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ Steam ID –∑ vanity URL
            steam_id = await self.steam_api.get_steam_id_from_vanity_url(steam_input)
        
        if not steam_id:
            await update.message.reply_text(
                "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ Steam ID!\n\n"
                "üîç –ü–µ—Ä–µ–≤—ñ—Ä:\n"
                "‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–Ω—è –Ω—ñ–∫–Ω–µ–π–º—É\n"
                "‚Ä¢ –ß–∏ –≤—ñ–¥–∫—Ä–∏—Ç–∏–π —Ç–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å Steam\n"
                "‚Ä¢ –ß–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π 17-–∑–Ω–∞—á–Ω–∏–π Steam ID\n\n"
                "üí° *–†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ:* –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /steam_login –¥–ª—è –ø–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ!"
            )
            return
        
        # –í–∞–ª—ñ–¥—É—î–º–æ Steam ID
        if not await self.steam_api.validate_steam_id(steam_id):
            await update.message.reply_text(
                "‚ùå Steam ID –Ω–µ–¥—ñ–π—Å–Ω–∏–π –∞–±–æ –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π!\n\n"
                "üîí –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:\n"
                "‚Ä¢ –ü—Ä–æ—Ñ—ñ–ª—å –ø—Ä–∏–≤–∞—Ç–Ω–∏–π\n"
                "‚Ä¢ Steam ID –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π\n"
                "‚Ä¢ –¢–∏–º—á–∞—Å–æ–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ Steam API\n\n"
                "üí° *–†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ:* –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /steam_login –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—ñ–≤!"
            )
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≥—Ä–∞–≤—Ü—è
        players = await self.steam_api.get_player_summaries([steam_id])
        if not players:
            await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–æ—Ñ—ñ–ª—å!")
            return
        
        player = players[0]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, —è–∫—â–æ –Ω—ñ - —Å—Ç–≤–æ—Ä—é—î–º–æ
        user = self.user_db.get_user(user_id)
        if not user:
            user = User(telegram_id=user_id, username=update.effective_user.username)
            self.user_db.create_user(user)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ Steam ID
        success = self.user_db.update_steam_id(user_id, steam_id)
        if success:
            await update.message.reply_text(
                f"‚úÖ Steam ID —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
                f"üë§ –ü—Ä–æ—Ñ—ñ–ª—å: {player.get('personaname', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
                f"üÜî Steam ID: {steam_id}\n\n"
                f"üéØ –¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à:\n"
                f"‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –ø—É–±–ª—ñ—á–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É /stats\n"
                f"‚Ä¢ –î–æ–¥–∞–≤–∞—Ç–∏ –¥—Ä—É–∑—ñ–≤ /add_friend\n"
                f"‚Ä¢ –ó–º–∞–≥–∞—Ç–∏—Å—è –≤ —Ä–µ–π—Ç–∏–Ω–≥—É /leaderboard\n\n"
                f"‚ö†Ô∏è **–û–±–º–µ–∂–µ–Ω–Ω—è:** –î–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –ø—É–±–ª—ñ—á–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞!\n"
                f"üí° **–î–ª—è –ø–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ:** –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /steam_login"
            )
        else:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è Steam ID. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")

    async def faceit_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /faceit_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ FACEIT"""
        user_id = update.effective_user.id
        user = self.user_db.get_user(user_id)
        
        if not user or not user.steam_id:
            await update.message.reply_text(
                "‚ùå –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤–∏ —Å–≤—ñ–π Steam ID!\n\n"
                "üîß –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥–∏:\n"
                "/steam_login - –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è —á–µ—Ä–µ–∑ Steam\n"
                "/steam_manual YOUR_STEAM_ID - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤—Ä—É—á–Ω—É"
            )
            return
        
        await update.message.reply_text("üèÜ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é FACEIT —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        try:
            # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ FACEIT API
            from ..services.faceit_api import FaceitAPI
            
            # TODO: –û—Ç—Ä–∏–º–∞—Ç–∏ FACEIT API –∫–ª—é—á –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
            faceit_api = FaceitAPI(api_key="YOUR_FACEIT_API_KEY")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –≥—Ä–∞–≤—Ü—è –∑–∞ Steam ID
            player = await faceit_api.get_player_by_steam_id(user.steam_id)
            
            if not player:
                await update.message.reply_text(
                    "‚ùå FACEIT –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!\n\n"
                    "üí° –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:\n"
                    "‚Ä¢ –ì—Ä–∞–≤–µ—Ü—å –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –Ω–∞ FACEIT\n"
                    "‚Ä¢ Steam ID –Ω–µ –ø–æ–≤'—è–∑–∞–Ω–∏–π –∑ FACEIT\n"
                    "‚Ä¢ –ü—Ä–æ—Ñ—ñ–ª—å –ø—Ä–∏–≤–∞—Ç–Ω–∏–π\n\n"
                    "üîó –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Å—è –Ω–∞: faceit.com"
                )
                return
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_data = await faceit_api.get_player_stats(player['player_id'])
            if not stats_data:
                await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ FACEIT —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!")
                return
            
            # –ü–∞—Ä—Å–∏–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = faceit_api.parse_player_stats(stats_data)
            
            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            stats_text = f"""
üèÜ FACEIT —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {player.get('nickname', '–ù–µ–≤—ñ–¥–æ–º–æ')}

üìä –û—Å–Ω–æ–≤–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:
‚Ä¢ –ú–∞—Ç—á—ñ–≤ –∑—ñ–≥—Ä–∞–Ω–æ: {stats['matches_played']}
‚Ä¢ –ü–µ—Ä–µ–º–æ–≥: {stats['wins']} ({stats['win_rate']}%)
‚Ä¢ K/D Ratio: {stats['kd_ratio']}
‚Ä¢ Headshot %: {stats['headshot_percent']}%

üéØ –°–µ—Ä–µ–¥–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:
‚Ä¢ –í–±–∏–≤—Å—Ç–≤ –∑–∞ –º–∞—Ç—á: {stats['average_kills']}
‚Ä¢ –°–º–µ—Ä—Ç–µ–π –∑–∞ –º–∞—Ç—á: {stats['average_deaths']}
‚Ä¢ –ê—Å–∏—Å—Ç—ñ–≤ –∑–∞ –º–∞—Ç—á: {stats['average_assists']}
‚Ä¢ Headshot –∑–∞ –º–∞—Ç—á: {stats['average_hs']}

üî• –°–µ—Ä—ñ—ó:
‚Ä¢ –ü–æ—Ç–æ—á–Ω–∞ —Å–µ—Ä—ñ—è –ø–µ—Ä–µ–º–æ–≥: {stats['current_win_streak']}
‚Ä¢ –ù–∞–π–¥–æ–≤—à–∞ —Å–µ—Ä—ñ—è –ø–µ—Ä–µ–º–æ–≥: {stats['longest_win_streak']}
‚Ä¢ –ü–æ—Ç–æ—á–Ω–∞ —Å–µ—Ä—ñ—è –ø–æ—Ä–∞–∑–æ–∫: {stats['current_lose_streak']}

üí° –ö–æ–º–∞–Ω–¥–∏:
/faceit_matches - –æ—Å—Ç–∞–Ω–Ω—ñ 20 –º–∞—Ç—á—ñ–≤
/faceit_compare STEAM_ID - –ø–æ—Ä—ñ–≤–Ω—è—Ç–∏ –∑ –≥—Ä–∞–≤—Ü–µ–º
"""
            await update.message.reply_text(stats_text)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ FACEIT API: {str(e)}")

    async def faceit_matches_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /faceit_matches - –æ—Å—Ç–∞–Ω–Ω—ñ –º–∞—Ç—á—ñ FACEIT"""
        user_id = update.effective_user.id
        user = self.user_db.get_user(user_id)
        
        if not user or not user.steam_id:
            await update.message.reply_text(
                "‚ùå –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤–∏ —Å–≤—ñ–π Steam ID!\n\n"
                "üîß –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥–∏:\n"
                "/steam_login - –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è —á–µ—Ä–µ–∑ Steam\n"
                "/steam_manual YOUR_STEAM_ID - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤—Ä—É—á–Ω—É"
            )
            return
        
        await update.message.reply_text("üéÆ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –æ—Å—Ç–∞–Ω–Ω—ñ FACEIT –º–∞—Ç—á—ñ...")
        
        try:
            from ..services.faceit_api import FaceitAPI
            faceit_api = FaceitAPI(api_key="YOUR_FACEIT_API_KEY")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –≥—Ä–∞–≤—Ü—è
            player = await faceit_api.get_player_by_steam_id(user.steam_id)
            if not player:
                await update.message.reply_text("‚ùå FACEIT –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
                return
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –º–∞—Ç—á—ñ
            matches = await faceit_api.get_recent_matches(player['player_id'], limit=20)
            if not matches:
                await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∞—Ç—á—ñ!")
                return
            
            # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á—ñ–≤
            matches_text = f"""
üéÆ –û—Å—Ç–∞–Ω–Ω—ñ 20 FACEIT –º–∞—Ç—á—ñ–≤ –¥–ª—è {player.get('nickname', '–ù–µ–≤—ñ–¥–æ–º–æ')}

"""
            
            for i, match in enumerate(matches[:10], 1):  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 10
                parsed_match = faceit_api.parse_match(match)
                result_emoji = "‚úÖ" if parsed_match['result'] == 'Victory' else "‚ùå"
                
                matches_text += f"""
{i}. {result_emoji} {parsed_match['map']} - {parsed_match['score']}
   K/D: {parsed_match['kills']}/{parsed_match['deaths']} ({parsed_match['kd_ratio']})
   HS: {parsed_match['headshots']} | MVP: {parsed_match['mvp']}
   ELO: {parsed_match['elo']} ({parsed_match['elo_change']:+d})
"""
            
            if len(matches) > 10:
                matches_text += f"\n... —Ç–∞ —â–µ {len(matches) - 10} –º–∞—Ç—á—ñ–≤"
            
            await update.message.reply_text(matches_text)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞—Ç—á—ñ–≤: {str(e)}")

    async def recent_activity_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /recent_activity"""
        user_id = update.effective_user.id
        user = self.user_db.get_user(user_id)
        
        if not user or not user.steam_id:
            await update.message.reply_text(
                "‚ùå –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤–∏ —Å–≤—ñ–π Steam ID –∫–æ–º–∞–Ω–¥–æ—é `/steam`",
                parse_mode='Markdown'
            )
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤
        days = 7
        if context.args:
            try:
                days = int(context.args[0])
                if days < 1 or days > 365:
                    days = 7
            except ValueError:
                days = 7
        
        await update.message.reply_text(f"üìä –ê–Ω–∞–ª—ñ–∑—É—é –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ {days} –¥–Ω—ñ–≤...")
        
        try:
            activity = await self.steam_api.get_recent_activity(user.steam_id, days)
            if not activity:
                await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å!")
                return
            
            activity_text = f"""
üìà **–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—è {activity['player_name']}**

üïí **–û—Å—Ç–∞–Ω–Ω—ñ–π –æ–Ω–ª–∞–π–Ω:**
‚Ä¢ –î–∞—Ç–∞: **{activity['last_online']}**
‚Ä¢ –î–Ω—ñ–≤ —Ç–æ–º—É: **{activity['days_since_online']}**
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–Ω–∏–π' if activity['is_recently_active'] else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}

üéØ **–û—Å—Ç–∞–Ω–Ω—ñ–π –º–∞—Ç—á:**
"""
            
            # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –º–∞—Ç—á—É —è–∫—â–æ —î
            last_match_stats = activity['last_match_stats']
            if last_match_stats.get('stats'):
                stats_dict = {}
                for stat in last_match_stats['stats']:
                    stats_dict[stat['name']] = stat['value']
                
                kills = stats_dict.get('last_match_kills', 0)
                deaths = stats_dict.get('last_match_deaths', 0)
                mvps = stats_dict.get('last_match_mvps', 0)
                damage = stats_dict.get('last_match_damage', 0)
                
                if kills > 0 or deaths > 0:
                    activity_text += f"‚Ä¢ K/D: **{kills}/{deaths}**\n"
                    activity_text += f"‚Ä¢ MVP: **{mvps}**\n"
                    activity_text += f"‚Ä¢ –£—Ä–æ–Ω: **{damage:,}**\n"
                else:
                    activity_text += "‚Ä¢ –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º–∞—Ç—á\n"
            else:
                activity_text += "‚Ä¢ –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º–∞—Ç—á\n"
            
            activity_text += f"\nüí° –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π `/stats week` –¥–ª—è —Ç–∏–∂–Ω–µ–≤–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
            
            await update.message.reply_text(activity_text, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

    async def time_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /time_stats –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Ä—ñ–∑–Ω—ñ –ø–µ—Ä—ñ–æ–¥–∏"""
        user_id = update.effective_user.id
        user = self.user_db.get_user(user_id)
        
        if not user or not user.steam_id:
            await update.message.reply_text(
                "‚ùå –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤–∏ —Å–≤—ñ–π Steam ID –∫–æ–º–∞–Ω–¥–æ—é `/steam`",
                parse_mode='Markdown'
            )
            return
        
        await update.message.reply_text("üìä –ü–æ—Ä—ñ–≤–Ω—é—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ä—ñ–∑–Ω—ñ –ø–µ—Ä—ñ–æ–¥–∏...")
        
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ä—ñ–∑–Ω—ñ –ø–µ—Ä—ñ–æ–¥–∏
            all_stats = await self.steam_api.get_player_stats(user.steam_id, "all")
            last_match_stats = await self.steam_api.get_player_stats(user.steam_id, "last_match")
            
            if not all_stats:
                await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!")
                return
            
            # –ü–∞—Ä—Å–∏–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            all_parsed = self.steam_api.parse_cs2_stats(all_stats)
            last_match_parsed = self.steam_api.parse_cs2_stats(last_match_stats) if last_match_stats else None
            
            players = await self.steam_api.get_player_summaries([user.steam_id])
            player_name = players[0].get('personaname', '–ù–µ–≤—ñ–¥–æ–º–æ') if players else '–ù–µ–≤—ñ–¥–æ–º–æ'
            
            comparison_text = f"""
üìä **–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {player_name}**

üéØ **–ó–∞ –≤–µ—Å—å —á–∞—Å:**
‚Ä¢ K/D: **{all_parsed['kd_ratio']}** | Win Rate: **{all_parsed['win_rate']}%**
‚Ä¢ Headshot %: **{all_parsed['headshot_percent']}%** | –¢–æ—á–Ω—ñ—Å—Ç—å: **{all_parsed['accuracy_percent']}%**
‚Ä¢ Impact Score: **{self.steam_api.calculate_impact_score(all_parsed)}/100**
"""
            
            if last_match_parsed and last_match_parsed.get('kills', 0) > 0:
                comparison_text += f"""
üéÆ **–û—Å—Ç–∞–Ω–Ω—ñ–π –º–∞—Ç—á:**
‚Ä¢ K/D: **{last_match_parsed['kd_ratio']}** | Win Rate: **{last_match_parsed['win_rate']}%**
‚Ä¢ Headshot %: **{last_match_parsed['headshot_percent']}%** | –¢–æ—á–Ω—ñ—Å—Ç—å: **{last_match_parsed['accuracy_percent']}%**
‚Ä¢ Impact Score: **{self.steam_api.calculate_impact_score(last_match_parsed)}/100**
"""
            
            comparison_text += f"""
üí° **–ö–æ–º–∞–Ω–¥–∏ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó:**
‚Ä¢ `/stats` - –∑–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ `/stats last_match` - –æ—Å—Ç–∞–Ω–Ω—ñ–π –º–∞—Ç—á
‚Ä¢ `/recent_activity 7` - –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–∞ 7 –¥–Ω—ñ–≤
"""
            
            await update.message.reply_text(comparison_text, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

    async def last_matches_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /last_matches –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ N –º–∞—Ç—á—ñ–≤"""
        user_id = update.effective_user.id
        user = self.user_db.get_user(user_id)
        
        if not user or not user.steam_id:
            await update.message.reply_text(
                "‚ùå –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤–∏ —Å–≤—ñ–π Steam ID –∫–æ–º–∞–Ω–¥–æ—é `/steam`",
                parse_mode='Markdown'
            )
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—Ç—á—ñ–≤
        matches_count = 20
        if context.args:
            try:
                matches_count = int(context.args[0])
                if matches_count < 1 or matches_count > 100:
                    matches_count = 20
            except ValueError:
                matches_count = 20
        
        await update.message.reply_text(f"üìä –ê–Ω–∞–ª—ñ–∑—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ {matches_count} –º–∞—Ç—á—ñ–≤...")
        
        try:
            recent_stats = await self.steam_api.get_recent_matches_stats(user.steam_id, matches_count)
            if not recent_stats:
                await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!")
                return
            
            stats = self.steam_api.parse_cs2_stats(recent_stats)
            players = await self.steam_api.get_player_summaries([user.steam_id])
            player_name = players[0].get('personaname', '–ù–µ–≤—ñ–¥–æ–º–æ') if players else '–ù–µ–≤—ñ–¥–æ–º–æ'
            impact_score = self.steam_api.calculate_impact_score(stats)
            
            matches_text = f"""
üéÆ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ {matches_count} –º–∞—Ç—á—ñ–≤**
üë§ **–ì—Ä–∞–≤–µ—Ü—å:** {player_name}

üìä **–û—Å–Ω–æ–≤–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:**
‚Ä¢ K/D Ratio: **{stats['kd_ratio']}** ({stats['kills']} / {stats['deaths']})
‚Ä¢ Win Rate: **{stats['win_rate']}%** ({stats['wins']}/{stats['matches_played']})
‚Ä¢ Headshot %: **{stats['headshot_percent']}%**
‚Ä¢ –¢–æ—á–Ω—ñ—Å—Ç—å: **{stats['accuracy_percent']}%**

üèÜ **–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è:**
‚Ä¢ MVP: **{stats['mvps']}** ({stats['mvp_percent']}%)
‚Ä¢ –£—Ä–æ–Ω –∑–∞ –º–∞—Ç—á: **{stats['damage_per_match']:,}**
‚Ä¢ –ê—Å–∏—Å—Ç–∏ –∑–∞ –º–∞—Ç—á: **{stats['assists_per_match']}**

üî• **–î–æ–¥–∞—Ç–∫–æ–≤–æ:**
‚Ä¢ –î–æ–º—ñ–Ω–∞—Ü—ñ—ó: **{stats['dominations']}** | –ü–æ–º—Å—Ç–∏: **{stats['revenges']}**
‚Ä¢ –í–±–∏–≤—Å—Ç–≤ –∑–±—Ä–æ—î—é –≤–æ—Ä–æ–≥–∞: **{stats['enemy_weapon_kills']}**
‚Ä¢ –í–±–∏–≤—Å—Ç–≤ –æ—Å–ª—ñ–ø–ª–µ–Ω–∏—Ö: **{stats['blinded_kills']}**
‚Ä¢ –ù–æ–∂–æ–≤–∏—Ö –¥—É–µ–ª–µ–π: **{stats['knife_fight_kills']}**
‚Ä¢ –ó–±—Ä–æ—ó –ø–æ–¥–∞—Ä–æ–≤–∞–Ω–æ: **{stats['weapons_donated']}**

‚ö° **Impact Score: {impact_score}/100**

üìù *{recent_stats.get('note', '–ü—Ä–∏–±–ª–∏–∑–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')}*
üìä –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ {recent_stats.get('total_matches', 0)} –∑–∞–≥–∞–ª—å–Ω–∏—Ö –º–∞—Ç—á—ñ–≤
"""
            
            await update.message.reply_text(matches_text, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

    async def demo_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /demo –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–µ–º–æ-—Ñ–∞–π–ª–∞–º–∏"""
        user_id = update.effective_user.id
        user = self.user_db.get_user(user_id)
        
        if not user or not user.steam_id:
            await update.message.reply_text(
                "‚ùå –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤–∏ —Å–≤—ñ–π Steam ID –∫–æ–º–∞–Ω–¥–æ—é `/steam`",
                parse_mode='Markdown'
            )
            return
        
        await update.message.reply_text("üìä –ê–Ω–∞–ª—ñ–∑—É—é –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –¥–µ–º–æ-—Ñ–∞–π–ª—ñ–≤...")
        
        try:
            demo_analysis = await self.steam_api.get_demo_analysis(user.steam_id)
            if not demo_analysis:
                await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–µ–º–æ!")
                return
            
            demo_text = f"""
üé¨ **–î–µ–º–æ-—Ñ–∞–π–ª–∏ –¥–ª—è {demo_analysis['player_name']}**

üìã **–î–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å:**
‚Ä¢ Steam Client: ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ
‚Ä¢ API –¥–æ—Å—Ç—É–ø: ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ
‚Ä¢ –û—Å—Ç–∞–Ω–Ω—ñ–π –æ–Ω–ª–∞–π–Ω: {demo_analysis['last_online']}

üîó **–°–ø–æ—Å–æ–±–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:**

1Ô∏è‚É£ **Steam Client:**
‚Ä¢ –í—ñ–¥–∫—Ä–∏–π Steam
‚Ä¢ –ü–µ—Ä–µ–π–¥–∏ –≤ CS2
‚Ä¢ –í—ñ–¥–∫—Ä–∏–π Watch ‚Üí Your Matches
‚Ä¢ –ó–∞–≤–∞–Ω—Ç–∞–∂ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –º–∞—Ç—á

2Ô∏è‚É£ **Steam Community:**
‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–Ω—å –º–∞—Ç—á—ñ –≤ –ø—Ä–æ—Ñ—ñ–ª—ñ
‚Ä¢ –ó–Ω–∞–π–¥–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –º–∞—Ç—á
‚Ä¢ –ó–∞–≤–∞–Ω—Ç–∞–∂ –¥–µ–º–æ

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:**
‚Ä¢ –î–µ–º–æ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –≤ Steam
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π CSGO Demo Manager –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
‚Ä¢ HLTV –Ω–∞–¥–∞—î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏
‚Ä¢ –î–µ–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ç–≤–æ—ó—Ö –º–∞—Ç—á—ñ–≤

‚ö†Ô∏è **–û–±–º–µ–∂–µ–Ω–Ω—è:**
‚Ä¢ Steam API –Ω–µ –Ω–∞–¥–∞—î –ø—Ä—è–º–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –¥–µ–º–æ
‚Ä¢ –î–µ–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç—ñ–ª—å–∫–∏ —á–µ—Ä–µ–∑ Steam Client
‚Ä¢ –ü–æ—Ç—Ä—ñ–±–Ω–æ –±—É—Ç–∏ —É—á–∞—Å–Ω–∏–∫–æ–º –º–∞—Ç—á—É
"""
            
            await update.message.reply_text(demo_text, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

    async def match_details_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /match_details –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –º–∞—Ç—á—É"""
        user_id = update.effective_user.id
        user = self.user_db.get_user(user_id)
        
        if not user or not user.steam_id:
            await update.message.reply_text(
                "‚ùå –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤–∏ —Å–≤—ñ–π Steam ID –∫–æ–º–∞–Ω–¥–æ—é `/steam`",
                parse_mode='Markdown'
            )
            return
        
        await update.message.reply_text("üìä –ê–Ω–∞–ª—ñ–∑—É—é –¥–µ—Ç–∞–ª—ñ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –º–∞—Ç—á—É...")
        
        try:
            match_details = await self.steam_api.get_match_details(user.steam_id)
            if not match_details:
                await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –º–∞—Ç—á—É!")
                return
            
            stats = match_details['stats']
            
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏
            kd_ratio = round(stats['kills'] / stats['deaths'], 2) if stats['deaths'] > 0 else stats['kills']
            result = "–ü–µ—Ä–µ–º–æ–≥–∞" if stats['total_wins'] > 0 else "–ü–æ—Ä–∞–∑–∫–∞"
            
            match_text = f"""
üéÆ **–î–µ—Ç–∞–ª—ñ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –º–∞—Ç—á—É**
üë§ **–ì—Ä–∞–≤–µ—Ü—å:** {match_details['player_name']}

üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç:**
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: **{result}**
‚Ä¢ K/D: **{stats['kills']}/{stats['deaths']}** ({kd_ratio})
‚Ä¢ MVP: **{stats['mvps']}**
‚Ä¢ –£—Ä–æ–Ω: **{stats['damage']:,}**
‚Ä¢ –†–∞—É–Ω–¥–∏: **{stats['rounds']}**
‚Ä¢ Contribution: **{stats['contribution_score']}**

üéØ **–†–∞—Ö—É–Ω–æ–∫:**
‚Ä¢ T —Å—Ç–æ—Ä–æ–Ω–∞: **{stats['t_wins']}** —Ä–∞—É–Ω–¥—ñ–≤
‚Ä¢ CT —Å—Ç–æ—Ä–æ–Ω–∞: **{stats['ct_wins']}** —Ä–∞—É–Ω–¥—ñ–≤
‚Ä¢ –ó–∞–≥–∞–ª–æ–º: **{stats['total_wins']}** —Ä–∞—É–Ω–¥—ñ–≤

üé¨ **–î–µ–º–æ-—Ñ–∞–π–ª:**
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–∏–π: {'‚úÖ' if match_details['demo_info']['available'] else '‚ùå'}
‚Ä¢ –ü—Ä–∏–º—ñ—Ç–∫–∞: {match_details['demo_info']['note']}

üí° **–î–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–µ–º–æ:**
‚Ä¢ –í—ñ–¥–∫—Ä–∏–π Steam ‚Üí CS2 ‚Üí Watch ‚Üí Your Matches
‚Ä¢ –ó–Ω–∞–π–¥–∏ —Ü–µ–π –º–∞—Ç—á —ñ –∑–∞–≤–∞–Ω—Ç–∞–∂ –¥–µ–º–æ
‚Ä¢ –î–µ–º–æ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –≤ Steam
"""
            
            await update.message.reply_text(match_text, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

    async def demo_help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /demo_help –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏ –ø–æ –¥–µ–º–æ"""
        help_text = """
üé¨ **–î–æ–≤—ñ–¥–∫–∞ –ø–æ –¥–µ–º–æ-—Ñ–∞–π–ª–∞–º**

üìã **–©–æ —Ç–∞–∫–µ –¥–µ–º–æ-—Ñ–∞–π–ª–∏:**
‚Ä¢ –ó–∞–ø–∏—Å–∏ –º–∞—Ç—á—ñ–≤ CS2
‚Ä¢ –ú–æ–∂–Ω–∞ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –∑ –±—É–¥—å-—è–∫–æ–≥–æ –∫—É—Ç–∞
‚Ä¢ –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–≤–æ—ó –ø–æ–º–∏–ª–∫–∏
‚Ä¢ –í–∏–≤—á–∞—Ç–∏ —Ç–∞–∫—Ç–∏–∫–∏ —Å—É–ø–µ—Ä–Ω–∏–∫—ñ–≤

üîß **–Ø–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–µ–º–æ:**

1Ô∏è‚É£ **–ß–µ—Ä–µ–∑ Steam Client:**
‚Ä¢ –í—ñ–¥–∫—Ä–∏–π Steam
‚Ä¢ –ó–∞–ø—É—Å—Ç–∏ CS2
‚Ä¢ –ü–µ—Ä–µ–π–¥–∏ –≤ Watch ‚Üí Your Matches
‚Ä¢ –ó–Ω–∞–π–¥–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –º–∞—Ç—á
‚Ä¢ –ù–∞—Ç–∏—Å–Ω–∏ Download

2Ô∏è‚É£ **–ß–µ—Ä–µ–∑ Steam Community:**
‚Ä¢ –í—ñ–¥–∫—Ä–∏–π —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å Steam
‚Ä¢ –ü–µ—Ä–µ–π–¥–∏ –≤ Game Stats ‚Üí CS2
‚Ä¢ –ó–Ω–∞–π–¥–∏ –º–∞—Ç—á—ñ
‚Ä¢ –ó–∞–≤–∞–Ω—Ç–∞–∂ –¥–µ–º–æ

üìÅ **–î–µ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –¥–µ–º–æ:**
```
Windows: C:\Program Files (x86)\Steam\steamapps\common\Counter-Strike Global Offensive\csgo\replays
macOS: ~/Library/Application Support/Steam/steamapps/common/Counter-Strike Global Offensive/csgo/replays
Linux: ~/.steam/steam/steamapps/common/Counter-Strike Global Offensive/csgo/replays
```

üõ†Ô∏è **–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É:**
‚Ä¢ **CSGO Demo Manager** - –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π
‚Ä¢ **HLTV** - –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
‚Ä¢ **Steam Watch** - –≤–±—É–¥–æ–≤–∞–Ω–∏–π –ø–ª–µ—î—Ä
‚Ä¢ **GOTV** - –¥–ª—è —Ç—É—Ä–Ω—ñ—Ä–Ω–∏—Ö –º–∞—Ç—á—ñ–≤

üí° **–ü–æ—Ä–∞–¥–∏:**
‚Ä¢ –î–µ–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ç–≤–æ—ó—Ö –º–∞—Ç—á—ñ–≤
‚Ä¢ –ó–±–µ—Ä—ñ–≥–∞–π –≤–∞–∂–ª–∏–≤—ñ –¥–µ–º–æ
‚Ä¢ –ê–Ω–∞–ª—ñ–∑—É–π —Å–≤–æ—ó –ø–æ–º–∏–ª–∫–∏
‚Ä¢ –í–∏–≤—á–∞–π —Ç–∞–∫—Ç–∏–∫–∏ –∫—Ä–∞—â–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤

‚ö†Ô∏è **–û–±–º–µ–∂–µ–Ω–Ω—è:**
‚Ä¢ Steam API –Ω–µ –Ω–∞–¥–∞—î –ø—Ä—è–º–∏–π –¥–æ—Å—Ç—É–ø
‚Ä¢ –ü–æ—Ç—Ä—ñ–±–µ–Ω Steam Client
‚Ä¢ –î–µ–º–æ –∑–∞–π–º–∞—é—Ç—å –º—ñ—Å—Ü–µ –Ω–∞ –¥–∏—Å–∫—É
"""
        
        await update.message.reply_text(help_text, parse_mode='Markdown')



    def extract_steam_id(self, text: str) -> Optional[str]:
        """–í–∏—Ç—è–≥—Ç–∏ Steam ID –∑ —Ç–µ–∫—Å—Ç—É"""
        # –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è 17-–∑–Ω–∞—á–Ω–æ–≥–æ Steam ID
        steam_id_pattern = r'\b7656119[0-9]{10}\b'
        match = re.search(steam_id_pattern, text)
        return match.group() if match else None

    async def demo_analysis_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /demo_analysis –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –¥–µ–º–æ"""
        user_id = update.effective_user.id
        user = self.user_db.get_user(user_id)
        
        if not user or not user.steam_id:
            await update.message.reply_text(
                "‚ùå –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤–∏ —Å–≤—ñ–π Steam ID –∫–æ–º–∞–Ω–¥–æ—é `/steam`",
                parse_mode='Markdown'
            )
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î match_id
        if not context.args:
            await update.message.reply_text(
                "‚ùå –í–∫–∞–∂–∏ ID –º–∞—Ç—á—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É!\n\n"
                "üìù **–ü—Ä–∏–∫–ª–∞–¥:**\n"
                "`/demo_analysis match_12345`\n\n"
                "üí° **–Ø–∫ –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –º–∞—Ç—á—É:**\n"
                "‚Ä¢ –ó Steam Client –ø—ñ—Å–ª—è –º–∞—Ç—á—É\n"
                "‚Ä¢ –ó –ø—Ä–æ—Ñ—ñ–ª—é Steam –≤ —Ä–æ–∑–¥—ñ–ª—ñ –º–∞—Ç—á—ñ–≤",
                parse_mode='Markdown'
            )
            return
        
        match_id = context.args[0]
        
        await update.message.reply_text(f"üéÆ –ê–Ω–∞–ª—ñ–∑—É—é –¥–µ–º–æ –º–∞—Ç—á—É {match_id}...")
        
        try:
            # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ DemoAnalyzer
            from src.services.demo_analyzer import DemoAnalyzer
            demo_analyzer = DemoAnalyzer(self.steam_api.api_key)
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–µ–º–æ
            demo_path = await demo_analyzer.download_demo(user.steam_id, match_id)
            if not demo_path:
                await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–µ–º–æ-—Ñ–∞–π–ª!")
                return
            
            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –¥–µ–º–æ
            analysis_result = await demo_analyzer.analyze_demo(demo_path, user.steam_id, match_id)
            if not analysis_result:
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –¥–µ–º–æ!")
                return
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞–Ω–∞–ª—ñ–∑ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
            from src.models.user import MatchAnalysis
            match_analysis = MatchAnalysis(
                steam_id=user.steam_id,
                match_id=match_id,
                match_date=datetime.now(),
                demo_path=demo_path
            )
            match_analysis.analyzed = True
            match_analysis.analysis_data = analysis_result
            
            self.user_db.save_match_analysis(match_analysis)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–≤—ñ—Ç
            summary = await demo_analyzer.get_analysis_summary(analysis_result)
            
            # –í–∏–¥–∞–ª—è—î–º–æ –¥–µ–º–æ-—Ñ–∞–π–ª
            await demo_analyzer.cleanup_demo(demo_path)
            
            await update.message.reply_text(summary, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

    async def demo_history_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /demo_history –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó –∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –º–∞—Ç—á—ñ–≤"""
        user_id = update.effective_user.id
        user = self.user_db.get_user(user_id)
        
        if not user or not user.steam_id:
            await update.message.reply_text(
                "‚ùå –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤–∏ —Å–≤—ñ–π Steam ID –∫–æ–º–∞–Ω–¥–æ—é `/steam`",
                parse_mode='Markdown'
            )
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—Ç—á—ñ–≤ –¥–ª—è –ø–æ–∫–∞–∑—É
        limit = 10
        if context.args:
            try:
                limit = int(context.args[0])
                if limit < 1 or limit > 50:
                    limit = 10
            except ValueError:
                limit = 10
        
        await update.message.reply_text(f"üìä –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —ñ—Å—Ç–æ—Ä—ñ—é –∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –º–∞—Ç—á—ñ–≤...")
        
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –º–∞—Ç—á—ñ
            recent_matches = self.user_db.get_recent_matches(user.steam_id, limit)
            
            if not recent_matches:
                await update.message.reply_text(
                    "üìù **–Ü—Å—Ç–æ—Ä—ñ—è –∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –º–∞—Ç—á—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è**\n\n"
                    "üí° **–©–æ–± –¥–æ–¥–∞—Ç–∏ –º–∞—Ç—á:**\n"
                    "`/demo_analysis match_id` - –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –¥–µ–º–æ –º–∞—Ç—á—É\n\n"
                    "üéÆ **–ü—Ä–∏–∫–ª–∞–¥:**\n"
                    "`/demo_analysis match_12345`",
                    parse_mode='Markdown'
                )
                return
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á—ñ–≤
            history_text = f"üìä **–Ü—Å—Ç–æ—Ä—ñ—è –∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –º–∞—Ç—á—ñ–≤** ({len(recent_matches)})\n\n"
            
            for i, match in enumerate(recent_matches, 1):
                match_date = match.match_date.strftime('%d.%m.%Y %H:%M')
                analyzed_status = "‚úÖ" if match.analyzed else "‚è≥"
                
                history_text += f"{i}. {analyzed_status} **{match.match_id}**\n"
                history_text += f"   üìÖ {match_date}\n"
                
                if match.analyzed and match.analysis_data:
                    analysis = match.analysis_data
                    if 'match_info' in analysis:
                        map_name = analysis['match_info'].get('map', '–ù–µ–≤—ñ–¥–æ–º–æ')
                        win_rate = analysis['match_info'].get('win_rate', 0)
                        history_text += f"   üó∫Ô∏è {map_name} | Win Rate: {win_rate}%\n"
                    
                    if 'player_stats' in analysis:
                        stats = analysis['player_stats']
                        kd = stats.get('kd_ratio', 0)
                        kills = stats.get('kills', 0)
                        deaths = stats.get('deaths', 0)
                        history_text += f"   üéØ K/D: {kd} ({kills}/{deaths})\n"
                
                history_text += "\n"
            
            history_text += f"üí° –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π `/demo_analysis match_id` –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –Ω–æ–≤–æ–≥–æ –º–∞—Ç—á—É"
            
            await update.message.reply_text(history_text, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

    async def demo_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /demo_stats –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑ –∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –º–∞—Ç—á—ñ–≤"""
        user_id = update.effective_user.id
        user = self.user_db.get_user(user_id)
        
        if not user or not user.steam_id:
            await update.message.reply_text(
                "‚ùå –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤–∏ —Å–≤—ñ–π Steam ID –∫–æ–º–∞–Ω–¥–æ—é `/steam`",
                parse_mode='Markdown'
            )
            return
        
        await update.message.reply_text("üìä –ê–Ω–∞–ª—ñ–∑—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑ –¥–µ–º–æ...")
        
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –º–∞—Ç—á—ñ
            all_matches = self.user_db.get_recent_matches(user.steam_id, 100)
            analyzed_matches = [m for m in all_matches if m.analyzed and m.analysis_data]
            
            if not analyzed_matches:
                await update.message.reply_text(
                    "üìù **–ù–µ–º–∞—î –∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –º–∞—Ç—á—ñ–≤**\n\n"
                    "üí° –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –∫—ñ–ª—å–∫–∞ –º–∞—Ç—á—ñ–≤:\n"
                    "`/demo_analysis match_id`",
                    parse_mode='Markdown'
                )
                return
            
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_kills = 0
            total_deaths = 0
            total_mvps = 0
            total_headshots = 0
            total_damage = 0
            total_rounds = 0
            total_wins = 0
            weapon_stats = {}
            map_stats = {}
            
            for match in analyzed_matches:
                analysis = match.analysis_data
                
                if 'player_stats' in analysis:
                    stats = analysis['player_stats']
                    total_kills += stats.get('kills', 0)
                    total_deaths += stats.get('deaths', 0)
                    total_mvps += stats.get('mvps', 0)
                    total_headshots += stats.get('headshots', 0)
                    total_damage += stats.get('damage_dealt', 0)
                
                if 'match_info' in analysis:
                    match_info = analysis['match_info']
                    total_rounds += match_info.get('rounds_played', 0)
                    total_wins += match_info.get('rounds_won', 0)
                    
                    map_name = match_info.get('map', '–ù–µ–≤—ñ–¥–æ–º–æ')
                    if map_name not in map_stats:
                        map_stats[map_name] = {'rounds': 0, 'wins': 0}
                    map_stats[map_name]['rounds'] += match_info.get('rounds_played', 0)
                    map_stats[map_name]['wins'] += match_info.get('rounds_won', 0)
                
                if 'weapon_stats' in analysis:
                    for weapon, stats in analysis['weapon_stats'].items():
                        if weapon not in weapon_stats:
                            weapon_stats[weapon] = {'kills': 0, 'accuracy': 0, 'count': 0}
                        weapon_stats[weapon]['kills'] += stats.get('kills', 0)
                        weapon_stats[weapon]['accuracy'] += stats.get('accuracy', 0)
                        weapon_stats[weapon]['count'] += 1
            
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏
            matches_count = len(analyzed_matches)
            avg_kd = round(total_kills / max(total_deaths, 1), 2)
            avg_headshot = round((total_headshots / max(total_kills, 1)) * 100, 1)
            avg_damage = round(total_damage / matches_count, 0)
            win_rate = round((total_wins / max(total_rounds, 1)) * 100, 1)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–≤—ñ—Ç
            stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑ {matches_count} –∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –º–∞—Ç—á—ñ–≤**

üéØ **–ó–∞–≥–∞–ª—å–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:**
‚Ä¢ –ú–∞—Ç—á—ñ–≤ –∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: **{matches_count}**
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∏–π K/D: **{avg_kd}** ({total_kills}/{total_deaths})
‚Ä¢ Headshot %: **{avg_headshot}%**
‚Ä¢ MVP: **{total_mvps}**
‚Ä¢ –£—Ä–æ–Ω –∑–∞ –º–∞—Ç—á: **{avg_damage:,}**
‚Ä¢ Win Rate: **{win_rate}%**

üó∫Ô∏è **–¢–æ–ø –∫–∞—Ä—Ç–∏–Ω–∏:**
"""
            
            # –°–æ—Ä—Ç—É—î–º–æ –∫–∞—Ä—Ç–∏–Ω–∏ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Ä–∞—É–Ω–¥—ñ–≤
            sorted_maps = sorted(map_stats.items(), key=lambda x: x[1]['rounds'], reverse=True)
            for i, (map_name, stats) in enumerate(sorted_maps[:3], 1):
                map_win_rate = round((stats['wins'] / max(stats['rounds'], 1)) * 100, 1)
                stats_text += f"{i}. **{map_name}**: {stats['rounds']} —Ä–∞—É–Ω–¥—ñ–≤ ({map_win_rate}%)\n"
            
            stats_text += "\nüî´ **–¢–æ–ø –∑–±—Ä–æ—è:**\n"
            
            # –°–æ—Ä—Ç—É—î–º–æ –∑–±—Ä–æ—é –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –≤–±–∏–≤—Å—Ç–≤
            sorted_weapons = sorted(weapon_stats.items(), key=lambda x: x[1]['kills'], reverse=True)
            for i, (weapon, stats) in enumerate(sorted_weapons[:3], 1):
                avg_accuracy = round(stats['accuracy'] / max(stats['count'], 1), 1)
                stats_text += f"{i}. **{weapon}**: {stats['kills']} –≤–±–∏–≤—Å—Ç–≤ ({avg_accuracy}% —Ç–æ—á–Ω—ñ—Å—Ç—å)\n"
            
            stats_text += f"\nüí° –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π `/demo_history` –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—ñ—Ö –º–∞—Ç—á—ñ–≤"
            
            await update.message.reply_text(stats_text, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

    async def enable_monitoring_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /enable_monitoring –¥–ª—è —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
        user_id = update.effective_user.id
        user = self.user_db.get_user(user_id)
        
        if not user or not user.steam_id:
            await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–π–¥—ñ—Ç—å —á–µ—Ä–µ–∑ Steam: /steam_login")
            return
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        user.monitoring_enabled = True
        self.user_db.update_user(user)
        
        await update.message.reply_text(
            "‚úÖ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —É–≤—ñ–º–∫–Ω–µ–Ω–æ!**\n\n"
            "üéÆ –¢–µ–ø–µ—Ä –≤–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ–≥–æ –º–∞—Ç—á—É\n"
            "üìä –ö–æ–∂–µ–Ω –º–∞—Ç—á –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ\n"
            "üóëÔ∏è –î–µ–º–æ-—Ñ–∞–π–ª–∏ –±—É–¥—É—Ç—å –≤–∏–¥–∞–ª–µ–Ω—ñ –ø—ñ—Å–ª—è –∞–Ω–∞–ª—ñ–∑—É\n\n"
            "üí° –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ `/disable_monitoring` –¥–ª—è –≤–∏–º–∫–Ω–µ–Ω–Ω—è"
        )
    
    async def disable_monitoring_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /disable_monitoring –¥–ª—è –≤–∏–º–∫–Ω–µ–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
        user_id = update.effective_user.id
        user = self.user_db.get_user(user_id)
        
        if not user or not user.steam_id:
            await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–π–¥—ñ—Ç—å —á–µ—Ä–µ–∑ Steam: /steam_login")
            return
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        user.monitoring_enabled = False
        self.user_db.update_user(user)
        
        await update.message.reply_text(
            "‚ùå **–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤–∏–º–∫–Ω–µ–Ω–æ!**\n\n"
            "üéÆ –í–∏ –±—ñ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
            "üí° –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ `/enable_monitoring` –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è"
        )
    
    async def monitoring_status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /monitoring_status –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
        user_id = update.effective_user.id
        user = self.user_db.get_user(user_id)
        
        if not user or not user.steam_id:
            await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–π–¥—ñ—Ç—å —á–µ—Ä–µ–∑ Steam: /steam_login")
            return
        
        status = "‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ" if getattr(user, 'monitoring_enabled', False) else "‚ùå –í–∏–º–∫–Ω–µ–Ω–æ"
        
        await update.message.reply_text(
            f"üìä **–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:** {status}\n\n"
            f"üéÆ Steam ID: `{user.steam_id}`\n"
            f"‚è∞ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω\n"
            f"üì± –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {'–¢–∞–∫' if getattr(user, 'monitoring_enabled', False) else '–ù—ñ'}\n"
            f"üé¨ –ê–Ω–∞–ª—ñ–∑ –¥–µ–º–æ: {'–¢–∞–∫' if getattr(user, 'monitoring_enabled', False) else '–ù—ñ'}\n\n"
            f"üí° –ö–æ–º–∞–Ω–¥–∏:\n"
            f"‚Ä¢ `/enable_monitoring` - —É–≤—ñ–º–∫–Ω—É—Ç–∏\n"
            f"‚Ä¢ `/disable_monitoring` - –≤–∏–º–∫–Ω—É—Ç–∏"
        )
