"""
–°–µ—Ä–≤—ñ—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö —â–æ–¥–µ–Ω–Ω–∏—Ö –∑–≤—ñ—Ç—ñ–≤
"""
import asyncio
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
import logging

from ..models.user import UserDatabase, User
from ..services.steam_api import SteamAPI


class DailyReportsService:
    def __init__(self, user_db: UserDatabase, steam_api: SteamAPI, bot):
        self.user_db = user_db
        self.steam_api = steam_api
        self.bot = bot
        self.logger = logging.getLogger(__name__)

    async def generate_personal_daily_report(self, user: User) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            if not user.steam_id:
                return None

            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            current_stats = await self.steam_api.get_player_stats(user.steam_id)
            if not current_stats:
                return None

            parsed_stats = self.steam_api.parse_cs2_stats(current_stats)
            impact_score = self.steam_api.calculate_impact_score(parsed_stats)

            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –≥—Ä–∞–≤—Ü—è
            players = await self.steam_api.get_player_summaries([user.steam_id])
            player_name = players[0].get('personaname', '–ì—Ä–∞–≤–µ—Ü—å') if players else '–ì—Ä–∞–≤–µ—Ü—å'

            # TODO: –í –º–∞–π–±—É—Ç–Ω—å–æ–º—É –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –≤—á–æ—Ä–∞—à–Ω—å–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
            # –ü–æ–∫–∏ —â–æ –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
            
            report = f"""
üåÖ **–©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç –¥–ª—è {player_name}**
üìÖ {datetime.now().strftime('%d.%m.%Y')}

üìä **–ü–æ—Ç–æ—á–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ K/D Ratio: **{parsed_stats['kd_ratio']}**
‚Ä¢ Win Rate: **{parsed_stats['win_rate']}%**
‚Ä¢ Headshot %: **{parsed_stats['headshot_percent']}%**
‚Ä¢ Impact Score: **{impact_score}/100**

üéØ **–û—Å–Ω–æ–≤–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:**
‚Ä¢ –ú–∞—Ç—á—ñ–≤ –∑—ñ–≥—Ä–∞–Ω–æ: **{parsed_stats['matches_played']}**
‚Ä¢ –ü–µ—Ä–µ–º–æ–≥: **{parsed_stats['wins']}**
‚Ä¢ MVP —Ä–∞—É–Ω–¥—ñ–≤: **{parsed_stats['mvps']}** ({parsed_stats['mvp_percent']}%)

üí° **–ü–æ—Ä–∞–¥–∞ –¥–Ω—è:**
{self._get_daily_tip(parsed_stats)}

üèÜ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π `/friends_stats` —â–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —è–∫ —Å–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è –¥—Ä—É–∑—ñ!
"""
            return report.strip()

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É –¥–ª—è {user.telegram_id}: {e}")
            return None

    async def generate_friends_daily_report(self, user: User) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç –ø–æ –¥—Ä—É–∑—è—Ö"""
        try:
            if not user.steam_id or not user.friends:
                return None

            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Å—ñ—Ö –¥—Ä—É–∑—ñ–≤ + –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            all_steam_ids = [user.steam_id] + user.friends
            friends_data = []

            for steam_id in all_steam_ids:
                raw_stats = await self.steam_api.get_player_stats(steam_id)
                if raw_stats:
                    stats = self.steam_api.parse_cs2_stats(raw_stats)
                    impact_score = self.steam_api.calculate_impact_score(stats)
                    
                    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è
                    players = await self.steam_api.get_player_summaries([steam_id])
                    name = players[0].get('personaname', '–ù–µ–≤—ñ–¥–æ–º–æ') if players else '–ù–µ–≤—ñ–¥–æ–º–æ'
                    
                    friends_data.append({
                        'steam_id': steam_id,
                        'name': name,
                        'impact_score': impact_score,
                        'kd_ratio': stats['kd_ratio'],
                        'win_rate': stats['win_rate'],
                        'is_me': steam_id == user.steam_id
                    })

            if not friends_data:
                return None

            # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ Impact Score
            friends_data.sort(key=lambda x: x['impact_score'], reverse=True)

            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–∑–∏—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_position = next((i+1 for i, friend in enumerate(friends_data) if friend['is_me']), 0)
            
            report = f"""
üèÜ **–©–æ–¥–µ–Ω–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–∑—ñ–≤**
üìÖ {datetime.now().strftime('%d.%m.%Y')}

üìä **–¢–æ–ø-{min(5, len(friends_data))} –≥—Ä–∞–≤—Ü—ñ–≤:**
"""

            # –ü–æ–∫–∞–∑—É—î–º–æ —Ç–æ–ø-5 –∞–±–æ –≤—Å—ñ—Ö —è–∫—â–æ –º–µ–Ω—à–µ
            for i, friend in enumerate(friends_data[:5], 1):
                emoji = "üëë" if i == 1 else f"{i}Ô∏è‚É£"
                me_indicator = " üë§" if friend['is_me'] else ""
                
                report += f"\n{emoji} **{friend['name']}**{me_indicator}"
                report += f"\n   ‚ö° Impact: {friend['impact_score']}/100 | K/D: {friend['kd_ratio']} | Win: {friend['win_rate']}%"

            # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–∑–∏—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if user_position > 5:
                user_data = next(friend for friend in friends_data if friend['is_me'])
                report += f"\n\nüìç **–¢–≤–æ—è –ø–æ–∑–∏—Ü—ñ—è: #{user_position}**"
                report += f"\n‚ö° Impact: {user_data['impact_score']}/100"

            # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–º—ñ–Ω
            report += f"\n\nüìà **–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–∏:**"
            report += f"\nüë• –ê–∫—Ç–∏–≤–Ω–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤: **{len(friends_data)}**"
            
            avg_impact = sum(f['impact_score'] for f in friends_data) / len(friends_data)
            report += f"\nüìä –°–µ—Ä–µ–¥–Ω—ñ–π Impact Score: **{avg_impact:.1f}/100**"

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ª—ñ–¥–µ—Ä–∞ –¥–Ω—è
            leader = friends_data[0]
            if not leader['is_me']:
                report += f"\n\nüéØ **–õ—ñ–¥–µ—Ä –¥–Ω—è:** {leader['name']} ({leader['impact_score']}/100)"
            else:
                report += f"\n\nüéâ **–¢–∏ –ª—ñ–¥–µ—Ä –≥—Ä—É–ø–∏!** –¢–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏!"

            return report.strip()

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É –ø–æ –¥—Ä—É–∑—è—Ö –¥–ª—è {user.telegram_id}: {e}")
            return None

    def _get_daily_tip(self, stats: Dict[str, Any]) -> str:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ä–∞–¥—É –¥–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        tips = []
        
        # –ü–æ—Ä–∞–¥–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if stats['headshot_percent'] < 30:
            tips.append("üéØ –ü—Ä–∞—Ü—é–π –Ω–∞–¥ —Ç–æ—á–Ω—ñ—Å—Ç—é - –Ω–∞–º–∞–≥–∞–π—Å—è –±—ñ–ª—å—à–µ —Ü—ñ–ª–∏—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤—É!")
        
        if stats['win_rate'] < 50:
            tips.append("ü§ù –ì—Ä–∞–π –±—ñ–ª—å—à–µ –∑ –∫–æ–º–∞–Ω–¥–æ—é - –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è —Ü–µ –∫–ª—é—á –¥–æ –ø–µ—Ä–µ–º–æ–≥–∏!")
        
        if stats['kd_ratio'] < 1.0:
            tips.append("‚öîÔ∏è –ë—É–¥—å –±—ñ–ª—å—à –æ–±–µ—Ä–µ–∂–Ω–∏–º - –∫—Ä–∞—â–µ –≤–∏–∂–∏—Ç–∏ —ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∫–æ–º–∞–Ω–¥—ñ!")
        
        if stats['assists_per_match'] < 2:
            tips.append("ü§ù –î–æ–ø–æ–º–∞–≥–∞–π —Ç–æ–≤–∞—Ä–∏—à–∞–º - –∞—Å–∏—Å—Ç–∏ —Ç–µ–∂ –≤–∞–∂–ª–∏–≤—ñ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏!")
        
        if stats['mvp_percent'] < 10:
            tips.append("üèÜ –ù–∞–º–∞–≥–∞–π—Å—è –±—É—Ç–∏ –±—ñ–ª—å—à –∞–∫—Ç–∏–≤–Ω–∏–º –≤ –∫–ª—é—á–æ–≤–∏—Ö —Ä–∞—É–Ω–¥–∞—Ö!")

        # –ó–∞–≥–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏
        general_tips = [
            "üéÆ –†–æ–∑–º–∏–Ω–∞–π—Å—è –ø–µ—Ä–µ–¥ –≥—Ä–æ—é - 10 —Ö–≤–∏–ª–∏–Ω –Ω–∞ aim_botz —Ç–≤–æ—Ä—è—Ç—å –¥–∏–≤–∞!",
            "üì∫ –î–∏–≤–∏—Å—å –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ –º–∞—Ç—á—ñ - –º–æ–∂–Ω–∞ –±–∞–≥–∞—Ç–æ —á–æ–º—É –Ω–∞–≤—á–∏—Ç–∏—Å—è!",
            "üéß –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ö–æ—Ä–æ—à—ñ –Ω–∞–≤—É—à–Ω–∏–∫–∏ - –∑–≤—É–∫ –≤ CS2 –¥—É–∂–µ –≤–∞–∂–ª–∏–≤–∏–π!",
            "üí™ –†–æ–±–∏ –ø–µ—Ä–µ—Ä–≤–∏ - —Å–≤—ñ–∂–∏–π —Ä–æ–∑—É–º –≥—Ä–∞—î –∫—Ä–∞—â–µ!",
            "üìä –ê–Ω–∞–ª—ñ–∑—É–π —Å–≤–æ—ó –¥–µ–º–∫–∏ - –∑–Ω–∞—Ö–æ–¥—å –ø–æ–º–∏–ª–∫–∏ —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª—è–π —ó—Ö!",
            "üéØ –ì—Ä–∞–π –Ω–∞ –æ–¥–Ω—ñ–π —á—É—Ç–ª–∏–≤–æ—Å—Ç—ñ –º–∏—à—ñ - –º'—è–∑–æ–≤–∞ –ø–∞–º'—è—Ç—å –≤–∞–∂–ª–∏–≤–∞!",
            "üó∫Ô∏è –í–∏–≤—á–∞–π –Ω–æ–≤—ñ –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –∫–∞—Ä—Ç–∞—Ö - –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω—ñ—Å—Ç—å –¥–∞—î –ø–µ—Ä–µ–≤–∞–≥—É!"
        ]
        
        # –Ø–∫—â–æ —î —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –ø–æ—Ä–∞–¥–∏ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—Ö, —ñ–Ω–∞–∫—à–µ –∑–∞–≥–∞–ª—å–Ω—ñ
        if tips:
            return tips[0]
        else:
            import random
            return random.choice(general_tips)

    async def send_daily_reports_to_all_users(self):
        """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —â–æ–¥–µ–Ω–Ω—ñ –∑–≤—ñ—Ç–∏ –≤—Å—ñ–º –∞–∫—Ç–∏–≤–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º"""
        users = self.user_db.get_all_users_with_steam()
        self.logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª—è—é —â–æ–¥–µ–Ω–Ω—ñ –∑–≤—ñ—Ç–∏ –¥–ª—è {len(users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
        
        reports_sent = 0
        errors = 0
        
        for user in users:
            try:
                # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
                personal_report = await self.generate_personal_daily_report(user)
                if personal_report:
                    await self.bot.send_message(
                        chat_id=user.telegram_id,
                        text=personal_report,
                        parse_mode='Markdown'
                    )
                    reports_sent += 1
                    
                    # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
                    await asyncio.sleep(0.5)
                
                # –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–≤—ñ—Ç –ø–æ –¥—Ä—É–∑—è—Ö (—è–∫—â–æ —î –¥—Ä—É–∑—ñ)
                if user.friends:
                    friends_report = await self.generate_friends_daily_report(user)
                    if friends_report:
                        await self.bot.send_message(
                            chat_id=user.telegram_id,
                            text=friends_report,
                            parse_mode='Markdown'
                        )
                        
                        # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
                        await asyncio.sleep(0.5)
                
            except Exception as e:
                self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–≤—ñ—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user.telegram_id}: {e}")
                errors += 1
                continue
        
        self.logger.info(f"–©–æ–¥–µ–Ω–Ω—ñ –∑–≤—ñ—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {reports_sent}, –ø–æ–º–∏–ª–æ–∫: {errors}")
        return reports_sent, errors

    async def send_weekly_summary(self):
        """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–∏–∂–Ω–µ–≤–∏–π –ø—ñ–¥—Å—É–º–æ–∫ (–º–∞–π–±—É—Ç–Ω—è —Ñ—É–Ω–∫—Ü—ñ—è)"""
        # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–∏–∂–Ω–µ–≤—ñ –∑–≤—ñ—Ç–∏ –∑ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        pass

    async def get_leaderboard_changes(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∑–º—ñ–Ω–∏ –≤ —Ä–µ–π—Ç–∏–Ω–≥—É (–º–∞–π–±—É—Ç–Ω—è —Ñ—É–Ω–∫—Ü—ñ—è)"""
        # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω –ø–æ–∑–∏—Ü—ñ–π –≤ —Ä–µ–π—Ç–∏–Ω–≥—É
        pass
