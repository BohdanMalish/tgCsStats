"""
–°–µ—Ä–≤—ñ—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –º–∞—Ç—á—ñ–≤ –≥—Ä–∞–≤—Ü—ñ–≤
"""
import asyncio
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from telegram import Bot
from telegram.error import TelegramError

from src.services.steam_api import SteamAPI
from src.services.demo_analyzer import DemoAnalyzer
from src.models.user import UserDatabase, MatchAnalysis


class MatchMonitor:
    def __init__(self, steam_api_key: str, bot_token: str, user_db: UserDatabase):
        self.steam_api = SteamAPI(steam_api_key)
        self.demo_analyzer = DemoAnalyzer(steam_api_key)
        self.bot = Bot(token=bot_token)
        self.user_db = user_db
        self.monitoring_interval = 300  # 5 —Ö–≤–∏–ª–∏–Ω
        self.last_match_cache = {}  # –ö–µ—à –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –º–∞—Ç—á—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ç—á—ñ–≤"""
        print("üéÆ –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –º–∞—Ç—á—ñ–≤...")
        
        while True:
            try:
                await self.check_all_users_matches()
                await asyncio.sleep(self.monitoring_interval)
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
                await asyncio.sleep(60)  # –ß–µ–∫–∞—î–º–æ 1 —Ö–≤–∏–ª–∏–Ω—É –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
    
    async def check_all_users_matches(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –º–∞—Ç—á—ñ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —É–≤—ñ–º–∫–Ω–µ–Ω–∏–º –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥–æ–º"""
        users = self.user_db.get_users_with_monitoring()
        
        for user in users:
            if user.steam_id:
                try:
                    await self.check_user_last_match(user)
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–∞—Ç—á—É –¥–ª—è {user.steam_id}: {e}")
    
    async def check_user_last_match(self, user):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º–∞—Ç—á –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ—Å—Ç–∞–Ω–Ω—é –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
            recent_activity = await self.steam_api.get_recent_activity(user.steam_id)
            
            if not recent_activity:
                return
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –Ω–æ–≤–∏–π –º–∞—Ç—á
            current_match_id = recent_activity.get('last_match_id')
            last_known_match = self.last_match_cache.get(user.steam_id)
            
            if current_match_id and current_match_id != last_known_match:
                # –ù–æ–≤–∏–π –º–∞—Ç—á –∑–Ω–∞–π–¥–µ–Ω–æ!
                print(f"üéØ –ù–æ–≤–∏–π –º–∞—Ç—á –¥–ª—è {user.steam_id}: {current_match_id}")
                
                # –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
                self.last_match_cache[user.steam_id] = current_match_id
                
                # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –º–∞—Ç—á
                await self.analyze_and_notify_match(user, current_match_id, recent_activity)
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–∞—Ç—á—É –¥–ª—è {user.steam_id}: {e}")
    
    async def analyze_and_notify_match(self, user, match_id: str, recent_activity: Dict[str, Any]):
        """–ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –º–∞—Ç—á —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –º–∞—Ç—á—É
            last_match_stats = await self.steam_api.get_player_stats(user.steam_id, "last_match")
            
            if not last_match_stats:
                print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á—É {match_id}")
                return
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –º–∞—Ç—á
            match_message = self.create_match_notification(user, match_id, last_match_stats, recent_activity)
            
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            await self.send_match_notification(user.telegram_id, match_message)
            
            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –¥–µ–º–æ —è–∫—â–æ –º–æ–∂–ª–∏–≤–æ
            await self.analyze_match_demo(user, match_id)
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –º–∞—Ç—á—É {match_id}: {e}")
    
    def create_match_notification(self, user, match_id: str, stats: Dict[str, Any], recent_activity: Dict[str, Any]) -> str:
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –º–∞—Ç—á"""
        try:
            # –û—Å–Ω–æ–≤–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            kills = stats.get('kills', 0)
            deaths = stats.get('deaths', 0)
            assists = stats.get('assists', 0)
            mvps = stats.get('mvps', 0)
            damage = stats.get('damage', 0)
            
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∏
            kd_ratio = round(kills / max(deaths, 1), 2)
            headshot_percent = stats.get('headshot_percent', 0)
            
            # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–∞—Ç—á
            map_name = recent_activity.get('last_match_map', '–ù–µ–≤—ñ–¥–æ–º–æ')
            match_result = recent_activity.get('last_match_result', '–ù–µ–≤—ñ–¥–æ–º–æ')
            match_duration = recent_activity.get('last_match_duration', '–ù–µ–≤—ñ–¥–æ–º–æ')
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            message = f"""üéÆ **–ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**

üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç:** {match_result}
üó∫Ô∏è **–ö–∞—Ä—Ç–∞:** {map_name}
‚è±Ô∏è **–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:** {match_duration}

üìà **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ K/D: **{kills}/{deaths}** ({kd_ratio})
‚Ä¢ –ê—Å–∏—Å—Ç–∏: **{assists}**
‚Ä¢ MVP: **{mvps}**
‚Ä¢ –£—Ä–æ–Ω: **{damage:,}**
‚Ä¢ Headshot %: **{headshot_percent}%**

üéØ **Match ID:** `{match_id}`

üí° –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ `/demo_analysis {match_id}` –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –¥–µ–º–æ!"""
            
            return message
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            return f"üéÆ –ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω–æ! Match ID: {match_id}"
    
    async def send_match_notification(self, telegram_id: int, message: str):
        """–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –º–∞—Ç—á"""
        try:
            await self.bot.send_message(
                chat_id=telegram_id,
                text=message,
                parse_mode='Markdown'
            )
            print(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {telegram_id}")
        except TelegramError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
    
    async def analyze_match_demo(self, user, match_id: str):
        """–ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –¥–µ–º–æ –º–∞—Ç—á—É"""
        try:
            print(f"üé¨ –ü–æ—á–∞—Ç–æ–∫ –∞–Ω–∞–ª—ñ–∑—É –¥–µ–º–æ –º–∞—Ç—á—É {match_id}...")
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–µ–º–æ
            demo_path = await self.demo_analyzer.download_demo(user.steam_id, match_id)
            
            if not demo_path:
                print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–µ–º–æ –¥–ª—è –º–∞—Ç—á—É {match_id}")
                return
            
            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –¥–µ–º–æ
            analysis_result = await self.demo_analyzer.analyze_demo(demo_path, user.steam_id, match_id)
            
            if analysis_result:
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞–Ω–∞–ª—ñ–∑ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
                match_analysis = MatchAnalysis(
                    steam_id=user.steam_id,
                    match_id=match_id,
                    match_date=datetime.now(),
                    demo_path=demo_path
                )
                match_analysis.analyzed = True
                match_analysis.analysis_data = analysis_result
                
                self.user_db.save_match_analysis(match_analysis)
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
                detailed_report = await self.demo_analyzer.get_analysis_summary(analysis_result)
                
                # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
                await self.bot.send_message(
                    chat_id=user.telegram_id,
                    text=f"üìä **–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –º–∞—Ç—á—É {match_id}:**\n\n{detailed_report}",
                    parse_mode='Markdown'
                )
                
                # –í–∏–¥–∞–ª—è—î–º–æ –¥–µ–º–æ-—Ñ–∞–π–ª
                await self.demo_analyzer.cleanup_demo(demo_path)
                
                print(f"‚úÖ –ê–Ω–∞–ª—ñ–∑ –¥–µ–º–æ –º–∞—Ç—á—É {match_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –¥–µ–º–æ –º–∞—Ç—á—É {match_id}")
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –¥–µ–º–æ: {e}")
    
    async def get_user_match_history(self, steam_id: str, limit: int = 10) -> List[Dict[str, Any]]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –º–∞—Ç—á—ñ–≤ –≥—Ä–∞–≤—Ü—è"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–Ω–∞–ª—ñ–∑–∏ –º–∞—Ç—á—ñ–≤
            match_analyses = self.user_db.get_recent_matches(steam_id, limit)
            
            history = []
            for analysis in match_analyses:
                history.append({
                    'match_id': analysis.match_id,
                    'match_date': analysis.match_date,
                    'analyzed': analysis.analyzed,
                    'analysis_data': analysis.analysis_data
                })
            
            return history
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –º–∞—Ç—á—ñ–≤: {e}")
            return []
    
    async def get_user_match_stats(self, steam_id: str) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∞–≥—Ä–µ–≥–æ–≤–∞–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å—ñ—Ö –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –º–∞—Ç—á—ñ–≤"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∞–Ω–∞–ª—ñ–∑–∏ –º–∞—Ç—á—ñ–≤
            match_analyses = self.user_db.get_recent_matches(steam_id, 1000)  # –í—Å—ñ –º–∞—Ç—á—ñ
            
            if not match_analyses:
                return {'message': '–ù–µ–º–∞—î –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –º–∞—Ç—á—ñ–≤'}
            
            # –ê–≥—Ä–µ–≥—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_matches = len(match_analyses)
            total_kills = 0
            total_deaths = 0
            total_assists = 0
            total_mvps = 0
            total_headshots = 0
            total_damage = 0
            
            for analysis in match_analyses:
                if analysis.analysis_data:
                    player_stats = analysis.analysis_data.get('player_stats', {})
                    total_kills += player_stats.get('kills', 0)
                    total_deaths += player_stats.get('deaths', 0)
                    total_assists += player_stats.get('assists', 0)
                    total_mvps += player_stats.get('mvps', 0)
                    total_headshots += player_stats.get('headshots', 0)
                    total_damage += player_stats.get('damage_dealt', 0)
            
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏
            avg_kd = round(total_kills / max(total_deaths, 1), 2)
            avg_headshot_percent = round((total_headshots / max(total_kills, 1)) * 100, 1)
            avg_damage_per_match = round(total_damage / total_matches, 0)
            
            return {
                'total_matches': total_matches,
                'total_kills': total_kills,
                'total_deaths': total_deaths,
                'total_assists': total_assists,
                'total_mvps': total_mvps,
                'total_headshots': total_headshots,
                'total_damage': total_damage,
                'avg_kd_ratio': avg_kd,
                'avg_headshot_percent': avg_headshot_percent,
                'avg_damage_per_match': avg_damage_per_match,
                'avg_mvps_per_match': round(total_mvps / total_matches, 1)
            }
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á—ñ–≤: {e}")
            return {'error': str(e)}
