"""
–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
"""
import asyncio
from datetime import datetime, time
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import logging

from .daily_reports import DailyReportsService


class TaskScheduler:
    def __init__(self, daily_reports_service: DailyReportsService):
        self.daily_reports_service = daily_reports_service
        self.scheduler = AsyncIOScheduler()
        self.logger = logging.getLogger(__name__)

    def start(self, daily_report_time: str = "10:00"):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫"""
        try:
            # –ü–∞—Ä—Å–∏–º–æ —á–∞—Å –¥–ª—è —â–æ–¥–µ–Ω–Ω–∏—Ö –∑–≤—ñ—Ç—ñ–≤
            hour, minute = map(int, daily_report_time.split(':'))
            
            # –î–æ–¥–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è —â–æ–¥–µ–Ω–Ω–∏—Ö –∑–≤—ñ—Ç—ñ–≤
            self.scheduler.add_job(
                func=self.daily_reports_service.send_daily_reports_to_all_users,
                trigger=CronTrigger(hour=hour, minute=minute),
                id='daily_reports',
                name='–©–æ–¥–µ–Ω–Ω—ñ –∑–≤—ñ—Ç–∏',
                replace_existing=True
            )
            
            # –î–æ–¥–∞—î–º–æ —Ç–∏–∂–Ω–µ–≤—ñ –∑–≤—ñ—Ç–∏ (–Ω–µ–¥—ñ–ª—è –æ 12:00)
            self.scheduler.add_job(
                func=self.daily_reports_service.send_weekly_summary,
                trigger=CronTrigger(day_of_week=6, hour=12, minute=0),  # –ù–µ–¥—ñ–ª—è
                id='weekly_reports',
                name='–¢–∏–∂–Ω–µ–≤—ñ –∑–≤—ñ—Ç–∏',
                replace_existing=True
            )
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
            self.scheduler.start()
            self.logger.info(f"‚úÖ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ. –©–æ–¥–µ–Ω–Ω—ñ –∑–≤—ñ—Ç–∏ –æ {daily_report_time}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: {e}")

    def stop(self):
        """–ó—É–ø–∏–Ω–∏—Ç–∏ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫"""
        if self.scheduler.running:
            self.scheduler.shutdown()
            self.logger.info("üõë –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ")

    def get_next_report_time(self) -> str:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —á–∞—Å –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–≤—ñ—Ç—É"""
        job = self.scheduler.get_job('daily_reports')
        if job and job.next_run_time:
            return job.next_run_time.strftime('%d.%m.%Y –æ %H:%M')
        return "–ù–µ–≤—ñ–¥–æ–º–æ"

    async def send_test_report(self, telegram_id: int):
        """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤–∏–π –∑–≤—ñ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
        try:
            from ..models.user import UserDatabase
            # –¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –ø–µ—Ä–µ–¥–∞—Ç–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
            user = self.daily_reports_service.user_db.get_user(telegram_id)
            if user and user.steam_id:
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
                personal_report = await self.daily_reports_service.generate_personal_daily_report(user)
                if personal_report:
                    await self.daily_reports_service.bot.send_message(
                        chat_id=telegram_id,
                        text=f"üß™ **–¢–µ—Å—Ç–æ–≤–∏–π –∑–≤—ñ—Ç:**\n\n{personal_report}",
                        parse_mode='Markdown'
                    )
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–≤—ñ—Ç –ø–æ –¥—Ä—É–∑—è—Ö —è–∫—â–æ —î
                if user.friends:
                    friends_report = await self.daily_reports_service.generate_friends_daily_report(user)
                    if friends_report:
                        await self.daily_reports_service.bot.send_message(
                            chat_id=telegram_id,
                            text=f"üß™ **–¢–µ—Å—Ç–æ–≤–∏–π –∑–≤—ñ—Ç –ø–æ –¥—Ä—É–∑—è—Ö:**\n\n{friends_report}",
                            parse_mode='Markdown'
                        )
                
                return True
            return False
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–≤—ñ—Ç—É: {e}")
            return False
