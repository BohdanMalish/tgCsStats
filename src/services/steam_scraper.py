"""
–ü—Ä–æ—Å—Ç–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É Steam –ø—Ä–æ—Ñ—ñ–ª—ñ–≤
"""
import aiohttp
import re
from typing import Optional, Dict, Any


class SteamScraper:
    def __init__(self):
        self.base_url = "https://steamcommunity.com"
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }

    async def get_profile_stats(self, steam_id: str) -> Optional[Dict[str, Any]]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑ –ø—Ä–æ—Ñ—ñ–ª—é Steam"""
        try:
            url = f"{self.base_url}/profiles/{steam_id}/stats/CS2"
            print(f"üîç –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏: {url}")
            
            async with aiohttp.ClientSession(headers=self.headers) as session:
                async with session.get(url) as response:
                    print(f"üì° –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {response.status}")
                    
                    if response.status == 200:
                        html = await response.text()
                        print(f"üìÑ –†–æ–∑–º—ñ—Ä HTML: {len(html)} —Å–∏–º–≤–æ–ª—ñ–≤")
                        
                        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ HTML –¥–ª—è –¥–µ–±–∞–≥—É
                        with open(f"debug_{steam_id}.html", "w", encoding="utf-8") as f:
                            f.write(html[:1000])  # –ü–µ—Ä—à—ñ 1000 —Å–∏–º–≤–æ–ª—ñ–≤
                        
                        stats = self._parse_profile_html(html)
                        print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫: {len(stats)}")
                        return stats
                    else:
                        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é: {response.status}")
                        return None
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
            return None

    def _parse_profile_html(self, html: str) -> Dict[str, Any]:
        """–ü—Ä–æ—Å—Ç–∏–π –ø–∞—Ä—Å–∏–Ω–≥ HTML –ø—Ä–æ—Ñ—ñ–ª—é Steam"""
        stats = {}
        
        try:
            print(f"üîç –ü–æ—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ HTML...")
            
            # –®—É–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ñ –≤–∏—Ä–∞–∑–∏
            basic_stats = self._extract_basic_stats(html)
            print(f"üìä –û—Å–Ω–æ–≤–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {basic_stats}")
            stats.update(basic_stats)
            
            weapon_stats = self._extract_weapon_stats(html)
            print(f"üî´ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–±—Ä–æ—ó: {weapon_stats}")
            stats.update(weapon_stats)
            
            print(f"‚úÖ –í—Å—å–æ–≥–æ –∑–Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫: {len(stats)}")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É HTML: {e}")
        
        return stats

    def _extract_basic_stats(self, html: str) -> Dict[str, Any]:
        """–í–∏—Ç—è–≥—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats = {}
        
        # –ü—Ä–æ—Å—Ç—ñ —Ä–µ–≥—É–ª—è—Ä–Ω—ñ –≤–∏—Ä–∞–∑–∏ –¥–ª—è –ø–æ—à—É–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
        patterns = {
            'kills': r'Kills["\s]*:["\s]*([0-9,]+)',
            'deaths': r'Deaths["\s]*:["\s]*([0-9,]+)',
            'wins': r'Wins["\s]*:["\s]*([0-9,]+)',
            'matches': r'Matches["\s]*:["\s]*([0-9,]+)',
            'mvps': r'MVPs["\s]*:["\s]*([0-9,]+)',
            'headshots': r'Headshots["\s]*:["\s]*([0-9,]+)',
            'damage': r'Damage["\s]*:["\s]*([0-9,]+)',
        }
        
        for key, pattern in patterns.items():
            match = re.search(pattern, html, re.IGNORECASE)
            if match:
                value = match.group(1).replace(',', '')
                stats[key] = int(value) if value.isdigit() else 0
        
        return stats

    def _extract_weapon_stats(self, html: str) -> Dict[str, Any]:
        """–í–∏—Ç—è–≥—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–±—Ä–æ—ó"""
        weapon_stats = {}
        
        # –®—É–∫–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ø—É–ª—è—Ä–Ω–æ—ó –∑–±—Ä–æ—ó
        weapons = ['ak47', 'm4a1', 'awp', 'glock', 'usp']
        
        for weapon in weapons:
            pattern = f'{weapon}["\s]*:["\s]*([0-9,]+)'
            match = re.search(pattern, html, re.IGNORECASE)
            if match:
                value = match.group(1).replace(',', '')
                weapon_stats[f'{weapon}_kills'] = int(value) if value.isdigit() else 0
        
        return weapon_stats

    async def get_recent_activity(self, steam_id: str) -> Optional[Dict[str, Any]]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å"""
        try:
            url = f"{self.base_url}/profiles/{steam_id}"
            
            async with aiohttp.ClientSession(headers=self.headers) as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        html = await response.text()
                        return self._parse_activity_html(html)
                    return None
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {e}")
            return None

    def _parse_activity_html(self, html: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
        activity = {}
        
        # –®—É–∫–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
        last_online_match = re.search(r'Last Online["\s]*:["\s]*([^"]+)', html)
        if last_online_match:
            activity['last_online'] = last_online_match.group(1).strip()
        
        return activity
