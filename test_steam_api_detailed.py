#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É Steam API
"""
import asyncio
import json
import aiohttp
from src.services.steam_api import SteamAPI
from src.services.steam_oauth import SteamOAuth

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
STEAM_API_KEY = "6629403219DD2ADCA0D3F552F03F92A8"
STEAM_ID = "76561198329975115"  # Makiavellli
APP_DOMAIN = "tgcsstats-production.up.railway.app"

async def test_steam_api_detailed():
    """–¢–µ—Å—Ç—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —Ä–æ–±–æ—Ç—É –∑ Steam API"""
    print("üîç –¢–µ—Å—Ç—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —Ä–æ–±–æ—Ç—É –∑ Steam API")
    print("=" * 50)
    
    steam_api = SteamAPI(STEAM_API_KEY)
    steam_oauth = SteamOAuth(STEAM_API_KEY, APP_DOMAIN)
    
    # 1. –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≥—Ä–∞–≤—Ü—è
    print("\n1Ô∏è‚É£ –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≥—Ä–∞–≤—Ü—è:")
    print("-" * 30)
    players = await steam_api.get_player_summaries([STEAM_ID])
    if players:
        player = players[0]
        print(f"üë§ –Ü–º'—è: {player.get('personaname', '–ù–µ–≤—ñ–¥–æ–º–æ')}")
        print(f"üÜî Steam ID: {player.get('steamid', '–ù–µ–≤—ñ–¥–æ–º–æ')}")
        print(f"üåê –ü—Ä–æ—Ñ—ñ–ª—å: {player.get('profileurl', '–ù–µ–≤—ñ–¥–æ–º–æ')}")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {player.get('personastate', '–ù–µ–≤—ñ–¥–æ–º–æ')}")
        print(f"üïí –û—Å—Ç–∞–Ω–Ω—ñ–π –æ–Ω–ª–∞–π–Ω: {player.get('lastlogoff', '–ù–µ–≤—ñ–¥–æ–º–æ')}")
        print(f"üîí –ü—Ä–∏–≤–∞—Ç–Ω—ñ—Å—Ç—å: {player.get('communityvisibilitystate', '–ù–µ–≤—ñ–¥–æ–º–æ')}")
        print(f"‚úÖ VAC –±–∞–Ω: {player.get('vacbanned', False)}")
        print(f"üéÆ –Ü–≥—Ä–∏: {player.get('gameextrainfo', '–ù–µ –≤ –≥—Ä—ñ')}")
    else:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≥—Ä–∞–≤—Ü—è")
    
    # 2. –û—Ç—Ä–∏–º—É—î–º–æ —Å–∏—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\n2Ô∏è‚É£ –°–∏—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑ Steam API:")
    print("-" * 30)
    raw_stats = await steam_api.get_player_stats(STEAM_ID)
    if raw_stats:
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞")
        print(f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫: {len(raw_stats.get('stats', []))}")
        print(f"üèÜ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—è–≥–Ω–µ–Ω—å: {len(raw_stats.get('achievements', []))}")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("\nüìà –í—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
        stats = raw_stats.get('stats', [])
        
        # –ì—Ä—É–ø—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
        categories = {
            '–û—Å–Ω–æ–≤–Ω—ñ': ['total_kills', 'total_deaths', 'total_wins', 'total_matches_played', 'total_mvps'],
            '–¢–æ—á–Ω—ñ—Å—Ç—å': ['total_shots_fired', 'total_shots_hit', 'total_kills_headshot'],
            '–ó–±—Ä–æ—è': ['total_kills_ak47', 'total_kills_m4a1', 'total_kills_awp', 'total_kills_deagle'],
            '–ö–∞—Ä—Ç–∏': ['total_wins_map_de_dust2', 'total_wins_map_de_inferno', 'total_wins_map_de_nuke'],
            '–î–æ–¥–∞—Ç–∫–æ–≤—ñ': ['total_damage_done', 'total_money_earned', 'total_planted_bombs', 'total_defused_bombs']
        }
        
        for category, keys in categories.items():
            print(f"\n  üìä {category}:")
            for stat in stats:
                if any(key in stat['name'] for key in keys):
                    print(f"    ‚Ä¢ {stat['name']}: {stat['value']}")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
        print("\nüèÖ –í—Å—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è:")
        achievements = raw_stats.get('achievements', [])
        for achievement in achievements:
            status = "‚úÖ" if achievement['achieved'] else "‚ùå"
            name = achievement.get('name', '–ù–µ–≤—ñ–¥–æ–º–æ')
            description = achievement.get('description', '–ù–µ–º–∞—î –æ–ø–∏—Å—É')
            print(f"  {status} {name}: {description}")
            
    else:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    
    # 3. –ü–∞—Ä—Å–∏–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\n3Ô∏è‚É£ –ü–∞—Ä—Å–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print("-" * 30)
    if raw_stats:
        parsed_stats = steam_api.parse_cs2_stats(raw_stats)
        print("üìä –û—Å–Ω–æ–≤–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:")
        for key, value in parsed_stats.items():
            if key != 'weapon_stats':
                print(f"  ‚Ä¢ {key}: {value}")
        
        print("\nüî´ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–±—Ä–æ—ó:")
        weapon_stats = parsed_stats.get('weapon_stats', [])
        for weapon in weapon_stats:
            print(f"  ‚Ä¢ {weapon['name']}: {weapon['kills']} –≤–±–∏–≤—Å—Ç–≤ ({weapon['accuracy']}% —Ç–æ—á–Ω—ñ—Å—Ç—å)")
    
    # 4. –¢–µ—Å—Ç—É—î–º–æ –ø—Ä–∏–≤–∞—Ç–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ OAuth
    print("\n4Ô∏è‚É£ –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:")
    print("-" * 30)
    private_stats = await steam_oauth.get_private_stats(STEAM_ID)
    if private_stats:
        print("‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞!")
        print(f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫: {len(private_stats.get('stats', []))}")
        
        # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –∑ –ø—É–±–ª—ñ—á–Ω–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
        if raw_stats:
            public_count = len(raw_stats.get('stats', []))
            private_count = len(private_stats.get('stats', []))
            print(f"üìà –ü—É–±–ª—ñ—á–Ω–∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫: {public_count}")
            print(f"üîí –ü—Ä–∏–≤–∞—Ç–Ω–∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫: {private_count}")
            print(f"üìä –†—ñ–∑–Ω–∏—Ü—è: {private_count - public_count} –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫")
    else:
        print("‚ùå –ü—Ä–∏–≤–∞—Ç–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    # 5. –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ API endpoints
    print("\n5Ô∏è‚É£ –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ API endpoints:")
    print("-" * 30)
    
    # Steam API endpoints –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    endpoints = [
        {
            'name': 'GetPlayerSummaries',
            'url': f'http://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/',
            'params': {'key': STEAM_API_KEY, 'steamids': STEAM_ID}
        },
        {
            'name': 'GetUserStatsForGame',
            'url': f'http://api.steampowered.com/ISteamUserStats/GetUserStatsForGame/v0002/',
            'params': {'key': STEAM_API_KEY, 'steamid': STEAM_ID, 'appid': 730}
        },
        {
            'name': 'GetOwnedGames',
            'url': f'http://api.steampowered.com/IPlayerService/GetOwnedGames/v0001/',
            'params': {'key': STEAM_API_KEY, 'steamid': STEAM_ID, 'include_appinfo': 1, 'include_played_free_games': 1}
        },
        {
            'name': 'GetRecentlyPlayedGames',
            'url': f'http://api.steampowered.com/IPlayerService/GetRecentlyPlayedGames/v0001/',
            'params': {'key': STEAM_API_KEY, 'steamid': STEAM_ID, 'count': 10}
        }
    ]
    
    async with aiohttp.ClientSession() as session:
        for endpoint in endpoints:
            try:
                async with session.get(endpoint['url'], params=endpoint['params']) as response:
                    if response.status == 200:
                        data = await response.json()
                        print(f"‚úÖ {endpoint['name']}: –£—Å–ø—ñ—à–Ω–æ")
                        if 'response' in data:
                            response_data = data['response']
                            if isinstance(response_data, dict):
                                for key, value in response_data.items():
                                    if isinstance(value, list):
                                        print(f"    ‚Ä¢ {key}: {len(value)} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤")
                                    else:
                                        print(f"    ‚Ä¢ {key}: {value}")
                    else:
                        print(f"‚ùå {endpoint['name']}: –ü–æ–º–∏–ª–∫–∞ {response.status}")
            except Exception as e:
                print(f"‚ùå {endpoint['name']}: –ü–æ–º–∏–ª–∫–∞ - {e}")

if __name__ == "__main__":
    asyncio.run(test_steam_api_detailed())
